{"version":3,"file":"pixi-tagged-text.m.js","sources":["../src/types.ts","../src/functionalUtils.ts","../src/errorMessaging.ts","../src/tags.ts","../src/stringUtil.ts","../src/pixiUtils.ts","../src/style.ts","../src/layout.ts","../src/TaggedText.ts","../node_modules/emoji-regex/es2015/RGI_Emoji.js"],"sourcesContent":["import * as PIXI from \"pixi.js\";\nimport TaggedText from \"./TaggedText\";\nimport { complement, flatEvery } from \"./functionalUtils\";\nimport { logWarning } from \"./errorMessaging\";\n\n///// GENERAL PURPOSE\n\nexport type Point = {\n  x: number;\n  y: number;\n};\nexport type Rectangle = Point & {\n  width: number;\n  height: number;\n};\n\nexport type Bounds = Rectangle;\n\nexport type Nested<T> = T | Array<Nested<T>>;\n\nexport type ErrorMessageType = \"warning\" | \"error\";\nexport interface ErrorMessage {\n  type: ErrorMessageType;\n  code: string;\n  message: string;\n  target?: TaggedText;\n}\n\n///// OPTIONS\n\nexport type SpriteSource =\n  | string\n  | PIXI.Texture\n  | HTMLCanvasElement\n  | HTMLVideoElement;\n\nexport type TextureSource =\n  | string\n  | HTMLImageElement\n  | HTMLCanvasElement\n  | HTMLVideoElement\n  | PIXI.BaseTexture;\n\nexport type ImageSource = PIXI.Sprite | SpriteSource | TextureSource;\n\nexport const isSpriteSource = (s: ImageSource): s is SpriteSource =>\n  typeof s === \"string\" ||\n  s instanceof PIXI.Texture ||\n  s instanceof HTMLCanvasElement ||\n  s instanceof HTMLVideoElement;\nexport const isBaseTexture = (s: ImageSource): s is PIXI.BaseTexture =>\n  s instanceof PIXI.BaseTexture;\nexport const isImageElement = (s: ImageSource): s is HTMLImageElement =>\n  s instanceof HTMLImageElement;\nexport const isTextureSource = (s: ImageSource): s is TextureSource =>\n  isImageElement(s) || isBaseTexture(s);\n\nexport type FontProperty = string | number;\nexport type FontMap = Record<string, FontProperty>;\n\nexport type ImageSourceMap = Record<string, ImageSource>;\nexport type ImageMap = Record<string, PIXI.Sprite>;\n\nexport type SplitStyle = \"words\" | \"characters\";\n\nexport type ErrorHandler = (e: ErrorMessage) => void;\nexport interface TaggedTextOptions {\n  debug?: boolean;\n  debugConsole?: boolean;\n  splitStyle?: SplitStyle;\n  adjustFontBaseline?: FontMap;\n  imgMap?: ImageSourceMap;\n  scaleIcons?: boolean;\n  skipUpdates?: boolean;\n  skipDraw?: boolean;\n  drawWhitespace?: boolean;\n  wrapEmoji?: boolean;\n  errorHandler?: ErrorHandler;\n  supressConsole?: boolean;\n}\n\n///// STYLE PROPERTIES\n\n// PROPERTY NAMES\nexport const IMG_REFERENCE_PROPERTY = \"imgSrc\";\nexport const IMG_DISPLAY_PROPERTY = \"imgDisplay\";\n\nexport enum MeasurementUnit {\n  default = \"px\",\n  px = \"px\",\n  em = \"em\",\n  rem = \"rem\",\n  pt = \"pt\",\n  pc = \"pc\",\n  in = \"in\",\n  cm = \"cm\",\n  mm = \"mm\",\n  percent = \"%\",\n  unknown = \"unknown\",\n}\n\nexport const DEFAULT_MEASUREMENT_UNIT: MeasurementUnit =\n  MeasurementUnit.default;\n\nexport interface MeasurementComponents {\n  value: number;\n  unit: MeasurementUnit;\n}\n\nexport type MeasurementValue = string | number;\n\nexport type Thickness = number;\nexport type Color = string | number;\nexport type FontSize = MeasurementValue;\nexport type Fill = Color | string[] | number[] | CanvasGradient | CanvasPattern;\nexport type VAlign = \"top\" | \"middle\" | \"bottom\" | \"baseline\" | number;\nexport type AlignClassic = \"left\" | \"right\" | \"center\" | \"justify\";\nexport type Align =\n  | AlignClassic\n  | \"justify\"\n  | \"justify-left\"\n  | \"justify-right\"\n  | \"justify-center\"\n  | \"justify-all\";\nexport type ImageDisplayMode = \"icon\" | \"block\" | \"inline\";\nexport type ImageReference = string;\nexport type ImageDimensionPercentage = string;\nexport type ImageDimension = number | string | ImageDimensionPercentage;\nexport type TextTransform = \"normal\" | \"capitalize\" | \"uppercase\" | \"lowercase\";\nexport type FontStyle = \"normal\" | \"italic\" | \"oblique\";\nexport type TextDecorationValue = \"underline\" | \"overline\" | \"line-through\";\nexport type TextDecoration =\n  | \"normal\"\n  | TextDecorationValue\n  | `${TextDecorationValue} ${TextDecorationValue}`\n  | `${TextDecorationValue} ${TextDecorationValue} ${TextDecorationValue}`;\n\nexport interface ImageStyles {\n  [IMG_REFERENCE_PROPERTY]?: ImageReference;\n  [IMG_DISPLAY_PROPERTY]?: ImageDisplayMode;\n  imgScale?: ImageDimensionPercentage;\n  imgScaleX?: ImageDimensionPercentage;\n  imgScaleY?: ImageDimensionPercentage;\n  imgWidth?: ImageDimension;\n  imgHeight?: ImageDimension;\n}\n\nexport interface UnderlineStyle {\n  underlineColor?: Color;\n  underlineThickness?: Thickness;\n  underlineOffset?: number;\n}\nexport interface OverlineStyle {\n  overlineColor?: Color;\n  overlineThickness?: Thickness;\n  overlineOffset?: number;\n}\nexport interface LineThroughStyle {\n  lineThroughColor?: Color;\n  lineThroughThickness?: Thickness;\n  lineThroughOffset?: number;\n}\n\nexport interface TextDecorationStyles\n  extends UnderlineStyle,\n    OverlineStyle,\n    LineThroughStyle {\n  textDecoration?: TextDecoration;\n}\n\nexport interface VerticalAlignStyles {\n  valign?: VAlign;\n}\n\nexport interface VerticalSpacingStyles {\n  lineSpacing?: number;\n  paragraphSpacing?: number;\n  adjustBaseline?: number;\n}\nexport interface FontScaleStyles {\n  fontScaleWidth?: number;\n  fontScaleHeight?: number;\n}\nexport interface TextTransformStyles {\n  textTransform?: TextTransform;\n}\nexport interface TextStyleExtended\n  extends Record<string, unknown>,\n    Partial<Omit<PIXI.ITextStyle, \"align\">>,\n    ImageStyles,\n    TextDecorationStyles,\n    VerticalAlignStyles,\n    VerticalSpacingStyles,\n    FontScaleStyles,\n    TextTransformStyles {\n  // Overridden properties\n  align?: Align;\n  fontStyle?: FontStyle;\n  fontSize?: FontSize;\n}\n\nexport interface TextDecorationMetrics {\n  color: Color;\n  bounds: Bounds;\n}\n\nexport type TextStyleSet = Record<string, TextStyleExtended>;\n\n///// TAG PARSING\n\ntype TagName = string;\ntype AttributeName = string;\ntype AttributeValue = string | number;\nexport type AttributesList = Record<AttributeName, AttributeValue>;\nexport interface TagWithAttributes {\n  tagName: string;\n  attributes: AttributesList;\n}\n\nexport interface TagMatchData extends TagWithAttributes {\n  tag: string;\n  isOpening: boolean;\n  index: number;\n}\nexport type TagStack = TagMatchData[];\n\n///// PARSED TOKENS\n\nexport type NewlineToken = \"\\n\";\nexport type WhitespaceToken = \" \" | \"\\t\" | NewlineToken;\nexport type TextToken = string;\nexport type SpriteToken = PIXI.Sprite;\n\nexport interface CompositeToken<T extends Token = Token> {\n  children: T[];\n}\n\nexport type Token = TextToken | CompositeToken | SpriteToken;\nexport type Tokens = CompositeToken;\n\nexport interface TagToken extends CompositeToken<TagToken | TextToken> {\n  tag?: TagName;\n  attributes?: AttributesList;\n}\nexport type TagTokens = TagToken;\n\nexport interface StyledToken\n  extends CompositeToken<StyledToken | TextToken | SpriteToken> {\n  style: TextStyleExtended;\n  tags: string;\n}\n\nexport type StyledTokens = StyledToken;\n\nexport interface IFontMetrics {\n  ascent: number;\n  descent: number;\n  fontSize: number;\n}\n\nexport interface FinalToken {\n  content: TextToken | SpriteToken;\n  bounds: Rectangle;\n  fontProperties: IFontMetrics;\n  style: TextStyleExtended;\n  tags: string;\n  textDecorations?: TextDecorationMetrics[];\n}\n\nexport const createEmptyFinalToken = (): FinalToken => ({\n  content: \"\",\n  bounds: new PIXI.Rectangle(),\n  fontProperties: { ascent: 0, descent: 0, fontSize: 0 },\n  style: {},\n  tags: \"\",\n  textDecorations: [],\n});\n\nexport type WordToken = FinalToken[];\nexport type LineToken = WordToken[];\nexport type ParagraphToken = LineToken[];\n\nexport interface SpriteFinalToken extends FinalToken {\n  content: SpriteToken;\n}\nexport interface TextFinalToken extends FinalToken {\n  content: TextToken;\n}\n\nexport interface WhitespaceFinalToken extends TextFinalToken {\n  content: WhitespaceToken;\n}\nexport interface NewlineFinalToken extends TextFinalToken {\n  content: NewlineToken;\n}\n\nexport const isWhitespace = (s: string): s is WhitespaceToken =>\n  s !== \"\" &&\n  s.split(\"\").every((char: string): boolean => char.search(/\\s/) === 0);\nexport const isNewline = (s: string): s is NewlineToken =>\n  isWhitespace(s) && s === \"\\n\";\n\nexport const _isSpriteToken = (t: FinalToken): t is SpriteFinalToken =>\n  t.content instanceof PIXI.Sprite;\nexport const isSpriteToken = flatEvery(_isSpriteToken);\n\nexport const _isTextToken = (t: FinalToken): t is TextFinalToken =>\n  typeof t.content === \"string\";\nexport const isTextToken = flatEvery(_isTextToken);\n\nexport const _isWhitespaceToken = (t: FinalToken): t is WhitespaceFinalToken =>\n  t !== undefined && _isTextToken(t) && isWhitespace(t.content);\nexport const isWhitespaceToken = flatEvery(_isWhitespaceToken);\n\nexport const _isNewlineToken = (t: FinalToken): t is NewlineFinalToken =>\n  t !== undefined && _isTextToken(t) && isNewline(t.content);\nexport const isNewlineToken = (t?: Nested<FinalToken>): boolean =>\n  t === undefined ? false : flatEvery(_isNewlineToken)(t);\n\nexport const isNotWhitespaceToken = complement(isWhitespaceToken);\n\nexport const isEmptyObject = <T extends unknown>(a: T): boolean =>\n  a instanceof Object && Object.keys(a).length === 0;\n\nexport const isPixel = (s: string): boolean => s.trim().endsWith(\"px\");\n\nexport const isEm = (s: string): boolean => s.trim().endsWith(\"em\");\n\nexport const isPercent = (s: string): boolean => s.trim().endsWith(\"%\");\n\nexport const pixelToNumber = (s: string): number =>\n  Number(s.trim().slice(0, -2));\nexport const emToNumber = pixelToNumber;\n\nexport const percentStringToNumber = (s: string): number =>\n  isPercent(s) ? Number(s.trim().slice(0, -1)) / 100 : NaN;\n\nexport const measurementValueToComponents = (\n  input: MeasurementValue\n): MeasurementComponents => {\n  if (input === undefined) {\n    throw new Error(\"value is undefined!\");\n  }\n\n  if (typeof input === \"number\") {\n    return { value: input, unit: DEFAULT_MEASUREMENT_UNIT };\n  }\n  input = input.trim();\n\n  const pattern = new RegExp(Object.values(MeasurementUnit).join(\"|\") + \"$\");\n  const i = input.search(pattern);\n  if (i !== -1) {\n    return {\n      value: parseFloat(input.slice(0, i)),\n      unit: input.slice(i) as MeasurementUnit,\n    };\n  }\n\n  const isAllDigits = input.search(/^[\\d.]+$/) === 0;\n  if (isAllDigits) {\n    const forcedNumberConversion = parseFloat(input);\n    if (isNaN(forcedNumberConversion) === false) {\n      return { value: parseFloat(input), unit: DEFAULT_MEASUREMENT_UNIT };\n    }\n  }\n\n  // TOOD: hook into errorHandler\n  logWarning()(\n    \"invalid-units\",\n    `${input} is not a valid measurement value. Please use one of the following units: ${Object.keys(\n      MeasurementUnit\n    ).join(\", \")}`\n  );\n\n  return { value: NaN, unit: MeasurementUnit.unknown };\n};\n","import { Nested } from \"./types\";\n\n/**\n * a -> boolean\n */\ntype Predicate<T extends unknown> = (t: T) => boolean;\n\nexport const combineRecords = <\n  A extends Record<string, unknown>,\n  B extends Record<string, unknown> = A\n>(\n  a: A,\n  b: B\n): A & B => ({\n  ...a,\n  ...b,\n});\n\nexport const first = <T>(a: T[]): T => a[0];\n\n/**\n * Return the last item in a list.\n * List f => f a -> a\n */\nexport const last = <T>(a: T[]): T => a[a.length - 1];\n\nexport const isDefined: Predicate<unknown | undefined> = (a): boolean =>\n  a !== undefined;\n\n/**\n * Predicate p => p -> p\n */\nexport const complement =\n  <T extends unknown>(predicate: Predicate<T>) =>\n  (input: T): boolean =>\n    !predicate(input);\n\n/**\n * List f => string -> f {string: a} -> f a\n */\nexport const pluck =\n  <T extends unknown, U extends unknown>(key: keyof U) =>\n  (objects: U[]): T[] =>\n    (objects as (U & Record<string, T>)[]).map<T>((o) => o[key]);\n\nexport const assoc =\n  <T extends Record<string, U>, U extends unknown>(key: keyof T) =>\n  (value: U) =>\n  (object: T): T => ({\n    ...object,\n    ...{ [key]: value },\n  });\n\nexport const mapProp =\n  <T, U>(k: keyof U) =>\n  (f: (t: T) => T) =>\n  (o: U): U => ({\n    ...o,\n    [k]: f((o as U & Record<string, T>)[k]),\n  });\n\n// export const every = <T>(p: Predicate<T>) => (a: T[]): boolean => a.every(p);\n\nexport const flatReduce =\n  <T, U>(f: (acc: U, t: T) => U, acc: U) =>\n  (nested: Nested<T>): U =>\n    // @ts-ignore-next-line\n    [nested].flat(255).reduce(f, acc);\n\ntype FlatReduceRetrun<T, U> = (nested: Nested<T>) => U;\n\nexport const flatEvery = <T>(p: Predicate<T>): FlatReduceRetrun<T, boolean> =>\n  flatReduce<T, boolean>((acc: boolean, t: T) => acc && p(t), true);\n\nexport const nestedMap =\n  <T, U>(f: (t: T) => U) =>\n  (nested: Nested<T>): Nested<U> =>\n    nested instanceof Array ? nested.map(nestedMap(f)) : f(nested);\n\nexport const countIf =\n  <T>(p: Predicate<T>) =>\n  (a: Array<T>): number =>\n    a.reduce((count, item) => (p(item) ? count + 1 : count), 0);\n\nexport type Unary<Param, Return> = (p: Param) => Return;\n","import TaggedText from \"./TaggedText\";\nimport { ErrorHandler, ErrorMessage, ErrorMessageType } from \"./types\";\n\nconst log =\n  (type: ErrorMessageType) =>\n  (handler?: ErrorHandler, supressConsole = false, target?: TaggedText) =>\n  (code: string, message: string): void => {\n    if (supressConsole !== true) {\n      const method = type === \"warning\" ? console.warn : console.error;\n      method(`[${code}] ${message}`);\n    }\n    if (handler) {\n      handler({ target, code, message, type } as ErrorMessage);\n    }\n  };\n\nexport const logWarning = log(\"warning\");\n","import getEmojiRegex from \"emoji-regex/es2015/RGI_Emoji\";\nimport { logWarning } from \"./errorMessaging\";\n\nimport { last } from \"./functionalUtils\";\nimport {\n  TagMatchData,\n  AttributesList,\n  TagWithAttributes,\n  CompositeToken,\n  TagToken,\n  TextToken,\n  isEmptyObject,\n} from \"./types\";\n\nconst defaultLogWarning = logWarning();\n\n// TODO: this can probably be just a static value without all the options and parameters.\n// Seems doing one pass will be enough to gather all relevant info.\n// TODO: support self closing tags?\n\n/**\n * Generates a regular expression object for identifying tags and attributes.\n * @param tagNamesToMatch List of tag-names that will be matched by the RegExp\n */\nexport const getTagRegex = (tagNamesToMatch: string[] = [\"\\\\w+\"]): RegExp => {\n  const matchingTagNames = tagNamesToMatch.join(\"|\");\n\n  const captureGroup = (a: string) => `(${a})`;\n  const noCaptureGroup = (a: string) => `(?:${a})`;\n\n  const OR = \"|\";\n  const WHITESPACE = `\\\\s`;\n  const S = WHITESPACE + \"*\";\n  const SS = WHITESPACE + \"+\";\n  const CHAR = \"[A-Za-z0-9_\\\\-]\";\n  const QUOTE = noCaptureGroup(`\"|'`);\n  const NOT_QUOTE = `[^${QUOTE}]`;\n  const TAG_NAMES = captureGroup(matchingTagNames);\n  const ATTRIBUTE_NAME = CHAR + \"+\";\n  const ATTRIBUTE_VALUE = NOT_QUOTE + \"+\";\n\n  const ATTRIBUTES =\n    captureGroup(\n      noCaptureGroup(\n        SS +\n          noCaptureGroup(ATTRIBUTE_NAME) +\n          `=` +\n          QUOTE +\n          noCaptureGroup(ATTRIBUTE_VALUE) +\n          QUOTE\n      ) + \"*\"\n    ) + \"+\";\n  const TAG_OPEN = `<` + TAG_NAMES + ATTRIBUTES + S + `>`;\n  const TAG_CLOSE = `</${TAG_NAMES}${S}>`;\n\n  const pattern = TAG_OPEN + OR + TAG_CLOSE;\n\n  return new RegExp(pattern, \"g\");\n};\n\nexport const EMOJI_TAG = \"__EMOJI__\";\n\n/**\n * Takes a string of attributes and returns an object with key value pairs for each attribute.\n * Converts \"true\" | \"false\" into booleans and number-like strings into numbers.\n * @param attributesString  XML style attributes like \"src='/image.png' alt='foo'\"\n */\nexport const parseAttributes = (attributesString = \"\"): AttributesList => {\n  if (attributesString === \"\") {\n    return {};\n  }\n\n  const attributeMatch = /[a-zA-Z][a-zA-Z0-9]*=('|\")[^'\"]*('|\")/g;\n\n  const attributes = attributesString.trim().match(attributeMatch);\n  if (attributes === null) {\n    throw new Error('Invalid attributes string: \"' + attributesString + '\"');\n  }\n\n  return [...attributes].reduce((obj: AttributesList, attribute: string) => {\n    const attributePair = attribute.split(\"=\");\n    const name = attributePair[0].trim();\n    const valueStr: string = attributePair[1]\n      .substring(1, attributePair[1].length - 1)\n      .trim();\n\n    obj[name] = valueStr;\n    return obj;\n  }, {});\n};\n\n/** Converts from RegExpExecArray to TagMatchData */\nexport const createTagMatchData = (match: RegExpExecArray): TagMatchData => {\n  const {\n    0: tag,\n    1: openTagName,\n    2: attributes,\n    3: closeTagName,\n    index,\n  } = match;\n  const tagName = openTagName ?? closeTagName;\n  const isOpening = openTagName !== undefined;\n  return {\n    tag,\n    tagName,\n    isOpening,\n    attributes: parseAttributes(attributes),\n    index,\n  };\n};\n\n/** Converts TagMatchData to TagWithAttributes */\nexport const tagMatchDataToTagWithAttributes = (\n  tag: TagMatchData\n): TagWithAttributes => ({\n  tagName: tag.tagName,\n  attributes: tag.attributes,\n});\n\n/**\n * Splits original text into an untagged list of string segments.\n * @param input Original text input\n * @param tagMatchData Results of regexp exect converted to tag matches.\n */\nexport const extractSegments = (\n  input: string,\n  tagMatchData: TagMatchData[]\n): string[] => {\n  const segments: string[] = [];\n\n  let remaining = input;\n  let offset = 0;\n  let tagMatch: TagMatchData;\n  for (tagMatch of tagMatchData) {\n    if (remaining !== undefined) {\n      const { tag, index } = tagMatch;\n      const startOfTag = index - offset;\n      const endOfTag = startOfTag + tag.length;\n      offset += endOfTag;\n\n      const segment = remaining.substr(0, startOfTag);\n      segments.push(segment);\n\n      remaining = remaining.substr(endOfTag);\n    }\n  }\n  segments.push(remaining);\n\n  return segments;\n};\n\nconst selfClosingTagSearch = (() => {\n  const group = (s: string) => `(${s})`;\n  const any = (s: string) => s + `*`;\n  const not = (...s: string[]) => `[^${s.join(\"\")}]`;\n  const WORD_START = `[A-Za-z_]`;\n  const WORD = `[A-Za-z0-9_]`;\n  const TAG_OPEN = `<`;\n  const TAG_SLASH = `/`;\n  const TAG_CLOSE = `>`;\n  const TAG_SELF_CLOSE = TAG_SLASH + TAG_CLOSE;\n\n  return new RegExp(\n    TAG_OPEN +\n      // tag group\n      group(WORD_START + any(WORD)) +\n      // attribute group\n      group(any(not(TAG_SLASH, TAG_CLOSE))) +\n      TAG_SELF_CLOSE,\n    `g`\n  );\n})();\n\nexport const wrapEmoji = (input: string): string => {\n  const emojiRegex = new RegExp(\n    `((<|</)[^>]*)?(${getEmojiRegex().source})+`,\n    \"gum\"\n  );\n\n  return input.replaceAll(emojiRegex, (match, tagStart) => {\n    if (tagStart?.length > 0) {\n      // if the emoji is inside a tag, ignore it.\n      return match;\n    }\n    return `<${EMOJI_TAG}>${match}</${EMOJI_TAG}>`;\n  });\n};\n\nexport const replaceSelfClosingTags = (input: string): string =>\n  input.replace(selfClosingTagSearch, (_, tag, attributes = \"\") => {\n    let output = `<${tag}${attributes}></${tag}>`;\n    output = output.replace(/\\s+/g, \" \");\n    output = output.replace(/\\s>/g, \">\");\n    return output;\n  });\n\nexport const removeTags = (input: string): string =>\n  input.replace(getTagRegex(), \"\");\n\n// export const isTextToken = (token: Token): boolean => typeof token === \"string\";\n// export const isNewlineToken = (token: Token): boolean =>\n//   isWhitespaceToken(token) && token === \"\\n\";\n// export const isCompositeToken = (token: Token): boolean =>\n//   isTextToken(token) === false && \"children\" in (token as CompositeToken);\n\n// export const makeSpacesSeparateWords = (segment: string): string[] =>\n//   segment.replace(\" \", \"__SPACE__ __SPACE__\").split(\"__SPACE__\");\n\nexport const tagMatchToTagToken = (tag: TagMatchData): TagToken => {\n  return {\n    tag: tag.tagName,\n    children: [],\n\n    // Add attributes unless undefined\n    ...(isEmptyObject(tag.attributes) ? {} : { attributes: tag.attributes }),\n  };\n};\n\nexport const createTokensNew = (\n  segments: string[],\n  tags: TagMatchData[],\n  logWarningFunction = defaultLogWarning\n): (TagToken | TextToken)[] => {\n  const rootTokens: CompositeToken<TagToken | TextToken> = { children: [] };\n  if (segments[0] !== \"\") {\n    rootTokens.children.push(segments[0]);\n  }\n  // Track which tags are opened and closed and add them to the list.\n  const tokenStack: TagToken[] = [rootTokens];\n\n  for (let i = 0; i < tags.length; i++) {\n    const tag = tags[i];\n    const segment = segments[i + 1] ?? \"\";\n    if (tag.isOpening) {\n      const token = tagMatchToTagToken(tag);\n      if (segment !== \"\") {\n        token.children.push(segment);\n      }\n      last(tokenStack).children.push(token);\n      tokenStack.push(token as CompositeToken<TagToken | TextToken>);\n    } else {\n      const poppedToken = tokenStack.pop();\n      if (poppedToken === undefined || poppedToken.tag !== tag.tagName) {\n        throw new Error(\n          `Unexpected tag nesting. Found a closing tag \"${tag.tagName}\" that doesn't match the previously open tag \"${poppedToken?.tag}\"`\n        );\n      }\n      if (segment !== \"\") {\n        last(tokenStack).children.push(segment);\n      }\n    }\n  }\n  if (tokenStack.length > 1) {\n    logWarningFunction(\n      \"unclosed-tags\",\n      `Found ${tokenStack.length - 1} unclosed tags in\\n${tokenStack\n        .map((token) => token.tag)\n        .join(\"-\")}`\n    );\n  }\n\n  return rootTokens.children;\n};\n\nexport const containsEmoji = (input: string): boolean =>\n  getEmojiRegex().test(input);\n\n/**\n * Converts a string into a list of tokens that match segments of text with styles.\n *\n * @param input Input string with XML-style tags.\n * @param tagNamesToMatch Used to only tokenize tags that have styles defined for them.\n */\nexport const parseTagsNew = (\n  input: string,\n  tagNamesToMatch: string[] = [],\n  shouldWrapEmoji = false,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, @typescript-eslint/no-unused-vars\n  logWarningFunction = defaultLogWarning\n): CompositeToken<TagToken | TextToken> => {\n  // TODO: Warn the user if tags were found that are not defined in the tagStyles.\n\n  if (shouldWrapEmoji && containsEmoji(input)) {\n    input = wrapEmoji(input);\n  }\n\n  input = replaceSelfClosingTags(input);\n  const re = getTagRegex(tagNamesToMatch);\n  const matchesRaw: RegExpExecArray[] = [];\n  const tagMatches: TagMatchData[] = [];\n  let match;\n  while ((match = re.exec(input))) {\n    matchesRaw.push(match);\n\n    const tagMatch = createTagMatchData(match);\n    tagMatches.push(tagMatch);\n  }\n\n  const segments = extractSegments(input, tagMatches);\n\n  const tokens = createTokensNew(segments, tagMatches, logWarningFunction);\n\n  return { children: tokens };\n};\n","// modified from: https://github.com/h26k2/capitalize-text/blob/master/index.js\nexport const capitalize = (str: string): string => {\n  const chars = str.split(\" \");\n  let converted = ``;\n\n  for (let i = 0; i < chars.length; i++) {\n    converted += `${chars[i].charAt(0).toUpperCase()}${chars[i].substr(1)} `;\n  }\n\n  return converted.trim();\n};\n\nexport const stringIsNumber = (s: string): boolean =>\n  s?.trim()?.search(/^-?[0-9]*\\.?[0-9]+$/) === 0 ?? false;\n","import * as PIXI from \"pixi.js\";\nimport { IFontMetrics } from \"./types\";\n\nconst PX_PER_EM = 16;\nconst PX_PER_PERCENT = 16 / 100;\nconst PX_PER_PT = 1.3281472327365;\n\nexport const measureFont = (context: CanvasRenderingContext2D): IFontMetrics =>\n  PIXI.TextMetrics.measureFont(context.font);\n\nexport const INITIAL_FONT_PROPS: IFontMetrics = {\n  ascent: 10,\n  descent: 3,\n  fontSize: 13,\n};\n\n// TODO: Memoize\nexport const getFontPropertiesOfText = (\n  textField: PIXI.Text,\n  forceUpdate = false\n): IFontMetrics => {\n  if (forceUpdate) {\n    textField.updateText(false);\n    return measureFont(textField.context);\n  } else {\n    const props = measureFont(textField.context);\n    const fs = textField.style.fontSize ?? NaN;\n    if (\n      props.ascent === INITIAL_FONT_PROPS.ascent &&\n      props.descent === INITIAL_FONT_PROPS.descent &&\n      (isNaN(Number(fs)) || fs > INITIAL_FONT_PROPS.fontSize)\n    ) {\n      throw new Error(\n        \"getFontPropertiesOfText() returned metrics associated with a Text field that has not been updated yet. Please try using the forceUpdate parameter when you call this function.\"\n      );\n    }\n    return measureFont(textField.context);\n  }\n};\n\nexport const addChildrenToContainer = (\n  children: PIXI.DisplayObject[],\n  container: PIXI.Container\n): void => children.forEach((child) => container.addChild(child));\n\nexport const cloneSprite = (sprite: PIXI.Sprite): PIXI.Sprite =>\n  new PIXI.Sprite(sprite.texture);\n\nexport const fontSizeStringToNumber = (size: string): number => {\n  const [valueString, unit] = size.split(/(%|pt|px|r?em)/);\n  const value = parseFloat(valueString);\n\n  if (isNaN(value)) {\n    NaN;\n  }\n\n  switch (unit) {\n    case \"%\":\n      return value * PX_PER_PERCENT;\n    case \"em\":\n    case \"rem\":\n      return value * PX_PER_EM;\n    case \"pt\":\n      return value * PX_PER_PT;\n    case \"px\":\n    default:\n      // keep as is.\n      return value;\n  }\n};\n","import { stringIsNumber } from \"./stringUtil\";\nimport { combineRecords, isDefined, pluck } from \"./functionalUtils\";\nimport {\n  AttributesList,\n  TagWithAttributes,\n  TextStyleExtended,\n  TextStyleSet,\n  IFontMetrics,\n  IMG_REFERENCE_PROPERTY,\n  IMG_DISPLAY_PROPERTY,\n  ImageMap,\n  TextToken,\n  TagToken,\n  TagTokens,\n  StyledTokens,\n  StyledToken,\n  SpriteToken,\n  isEmptyObject,\n  TextDecorationValue,\n  Bounds,\n  TextDecorationMetrics,\n  Thickness,\n  Color,\n  FontSize,\n  measurementValueToComponents,\n  MeasurementUnit,\n  Align,\n  AlignClassic,\n} from \"./types\";\nimport { cloneSprite } from \"./pixiUtils\";\nimport * as PIXI from \"pixi.js\";\n\nexport const DEFAULT_STYLE: TextStyleExtended = {\n  valign: \"baseline\",\n  dropShadowColor: 0x000000,\n  fill: 0x000000,\n  fontSize: 26,\n  stroke: 0x000000,\n  [IMG_DISPLAY_PROPERTY]: \"inline\",\n  wordWrap: true,\n  wordWrapWidth: 500,\n};\n\n/**\n * Combine 2 styles into one.\n */\nexport const combineStyles: (\n  a: TextStyleExtended,\n  b: TextStyleExtended\n) => TextStyleExtended = combineRecords;\n\n/**\n * Combines multiple styles into one.\n * @param styles List of styles to combine.\n */\nexport const combineAllStyles = (\n  styles: (TextStyleExtended | undefined)[]\n): TextStyleExtended =>\n  (styles.filter(isDefined) as TextStyleExtended[]).reduce(combineStyles, {});\n\nexport const convertAttributeValues = (\n  attributes: AttributesList\n): AttributesList => {\n  const convertedAttributes: AttributesList = {};\n  for (const key in attributes) {\n    const value = attributes[key];\n    const isValueString = typeof value === \"string\";\n    const isStringNumber = isValueString && stringIsNumber(value);\n\n    if (isStringNumber) {\n      convertedAttributes[key] = parseFloat(value);\n    } else {\n      convertedAttributes[key] = value;\n    }\n  }\n  return convertedAttributes;\n};\n\n/**\n * Replaces properties of a TextStyle object with new values.\n * (Since AttributeLists are basically partially defined styles, this is the same as combineStyles)\n * @param attributes List of attributes to overwrite in the target style.\n * @param style The style to modify.\n */\nexport const injectAttributes = (\n  attributes: AttributesList = {},\n  style: TextStyleExtended = {}\n): TextStyleExtended | undefined => {\n  if (isEmptyObject(style) && isEmptyObject(attributes)) return undefined;\n  return combineRecords(style, convertAttributeValues(attributes));\n};\n\n/**\n * Looks up a tag in a list of tag styles (with optional attributes) and returns it.\n * @param tagName Tag name to check.\n * @param tagStyles Set of tag styles to search.\n * @param attributes Attributes to inject into the style (optional).\n */\nexport const getStyleForTag = (\n  tagName: string,\n  tagStyles: TextStyleSet,\n  attributes: AttributesList = {}\n): TextStyleExtended | undefined => {\n  const style = injectAttributes(attributes, tagStyles[tagName]);\n  if (style == {}) return undefined;\n  return style;\n};\n\n/**\n * Converts TagWithAttributes into a style object.\n * @param param0 A TagWithAttributes object that has a tag name matched with any optional attributes.\n * @param tagStyles Set of tag styles to search.\n */\nexport const tagWithAttributesToStyle = (\n  { tagName, attributes }: TagWithAttributes,\n  tagStyles: TextStyleSet\n): TextStyleExtended =>\n  getStyleForTag(tagName, tagStyles, attributes) as TextStyleExtended;\n\n/**\n * Gets styles for several tags and returns a single combined style object.\n * Results are cached for future requests.\n * @param tags Tags (with attribues) to look up.\n * @param tagStyles Set of tag styles to search.\n * @param styleCache An object that holds the cached values for the combined styles.\n * @returns\n */\nexport const getStyleForTags = (\n  tags: TagWithAttributes[],\n  tagStyles: TextStyleSet,\n  styleCache: TextStyleSet\n): TextStyleExtended => {\n  const tagHash = JSON.stringify(tags);\n  if (styleCache[tagHash] === undefined) {\n    const defaultStyle = tagStyles.default;\n    const styles = tags.map((tag) => tagWithAttributesToStyle(tag, tagStyles));\n    const stylesWithDefault = [defaultStyle, ...styles];\n    styleCache[tagHash] = combineAllStyles(stylesWithDefault);\n  }\n  return styleCache[tagHash];\n};\n\nexport const interpretFontSize = (\n  baseFontSize: FontSize,\n  fontSize: FontSize\n): FontSize => {\n  const { value: baseValue, unit: baseUnit } =\n    measurementValueToComponents(baseFontSize);\n  const { value, unit } = measurementValueToComponents(fontSize);\n\n  if (unit === MeasurementUnit.percent) {\n    const percentage = value / 100;\n    return baseValue * percentage + baseUnit;\n  }\n  return fontSize;\n};\n\nexport const mapTagsToStyles = (\n  tokens: TagTokens,\n  styles: TextStyleSet,\n  spriteTemplates?: ImageMap\n): StyledTokens => {\n  const defaultStyle: TextStyleExtended = styles.default ?? {};\n  const tagStack: TagWithAttributes[] = [];\n  const fontSizeStack: FontSize[] = [];\n  const styleCache = {};\n\n  const convertTagTokenToStyledToken = (\n    token: TagToken | TextToken\n  ): StyledToken | TextToken => {\n    if (typeof token === \"string\") {\n      return token as TextToken;\n    }\n\n    const { tag, attributes = {} } = token;\n    let style: TextStyleExtended = defaultStyle;\n    let tags = \"\";\n\n    const currentBaseFontSize =\n      fontSizeStack[fontSizeStack.length - 1] ?? DEFAULT_STYLE.fontSize;\n\n    if (tag) {\n      // Put the current tag on the stack.\n      tagStack.push({ tagName: tag, attributes });\n      // Get tag names as comma separates string\n      tags = pluck(\"tagName\")(tagStack).join(\",\");\n      // Merge all tags into a style object.\n      style = getStyleForTags(tagStack, styles, styleCache);\n      style = convertDecorationToLineProps(style);\n    }\n\n    if (style.fontSize !== undefined) {\n      style.fontSize = interpretFontSize(currentBaseFontSize, style.fontSize);\n    } else {\n      style.fontSize = currentBaseFontSize;\n    }\n\n    fontSizeStack.push(style.fontSize as FontSize);\n\n    const styledToken: StyledToken = {\n      style,\n      tags,\n      children: token.children.map(convertTagTokenToStyledToken),\n    };\n\n    // If a matching sprite exits in the imgMap...\n    const imgKey = style[IMG_REFERENCE_PROPERTY] ?? \"\";\n    if (imgKey) {\n      if (spriteTemplates === undefined) {\n        throw new Error(\n          `An image tag with ${IMG_REFERENCE_PROPERTY}=\"${imgKey}\" was encountered, but no imgMap was provided. Please include a valid Sprite in the imgMap property in the options in your TaggedText constructor.`\n        );\n      }\n      const sprite: SpriteToken | undefined = spriteTemplates[imgKey];\n      if (sprite === undefined) {\n        throw new Error(\n          `An image tag with ${IMG_REFERENCE_PROPERTY}=\"${imgKey}\" was encountered, but there was no matching sprite in the sprite map. Please include a valid Sprite in the imgMap property in the options in your TaggedText constructor.`\n        );\n      }\n      if (sprite instanceof PIXI.Sprite === false) {\n        throw new Error(\n          `The image reference you provided for \"${imgKey}\" is not a Sprite. The imgMap can only accept PIXI.Sprite instances.`\n        );\n      }\n\n      // insert sprite as first token.\n      const cloneOfSprite = cloneSprite(sprite);\n      styledToken.children = [cloneOfSprite, ...styledToken.children];\n    }\n\n    // Remove the last tag from the stack\n    tagStack.pop();\n    fontSizeStack.pop();\n\n    return styledToken;\n  };\n\n  return convertTagTokenToStyledToken(tokens) as StyledTokens;\n};\n\nexport const convertDecorationToLineProps = (\n  style: TextStyleExtended\n): TextStyleExtended => {\n  const { textDecoration } = style;\n\n  if (textDecoration === undefined || textDecoration === \"normal\") {\n    return style;\n  }\n\n  const { decorationColor, decorationThickness } = style;\n  const defaultColor = decorationColor || style.fill || DEFAULT_STYLE.fill;\n  const defaultThickness = decorationThickness || 1;\n  const defaultOffset = 0;\n\n  function mergeDecoration(\n    decorationLineType: TextDecorationValue,\n    decorationLineTypeCamelCase: string = decorationLineType\n  ): Partial<TextStyleExtended> {\n    if (style.textDecoration?.includes(decorationLineType)) {\n      return {\n        [`${decorationLineTypeCamelCase}Color`]:\n          style[`${decorationLineTypeCamelCase}Color`] ?? defaultColor,\n        [`${decorationLineTypeCamelCase}Thickness`]:\n          style[`${decorationLineTypeCamelCase}Thickness`] ?? defaultThickness,\n        [`${decorationLineTypeCamelCase}Offset`]:\n          style[`${decorationLineTypeCamelCase}Offset`] ?? defaultOffset,\n      };\n    }\n    return {};\n  }\n\n  return {\n    ...style,\n    ...mergeDecoration(\"underline\"),\n    ...mergeDecoration(\"overline\"),\n    ...mergeDecoration(\"line-through\", \"lineThrough\"),\n  };\n};\n\nexport const extractDecorations = (\n  style: TextStyleExtended,\n  textBounds: Bounds,\n  fontProperties: IFontMetrics\n): TextDecorationMetrics[] => {\n  const { ascent, descent } = fontProperties;\n  const baseline = ascent;\n  const ascender = descent;\n  const xHeight = baseline - ascender;\n  const { width } = textBounds;\n  const x = 0;\n\n  function styleToMetrics(key: string): TextDecorationMetrics | undefined {\n    const color = style[`${key}Color`] as Color;\n    const height = style[`${key}Thickness`] as Thickness;\n    const offset = (style[`${key}Offset`] as number) ?? 0;\n\n    if (color === undefined || height === undefined) {\n      return undefined;\n    }\n\n    let y = offset;\n    if (key === \"underline\") {\n      // position underline below baseline\n      y += baseline + descent / 2;\n    } else if (key === \"lineThrough\") {\n      // position lineThrough in center of ascent\n      y += ascender + xHeight / 2;\n    }\n    // else, position overline at top of text\n\n    return {\n      color,\n      bounds: { x, y, width, height },\n    };\n  }\n\n  const keySuffices = [\"underline\", \"overline\", \"lineThrough\"];\n  const metrics = keySuffices\n    .map(styleToMetrics)\n    .filter((x) => x !== undefined) as TextDecorationMetrics[];\n  return metrics;\n};\n\nexport const convertUnsupportedAlignment = (\n  align?: Align\n): AlignClassic | undefined => {\n  if (align === undefined) {\n    return undefined;\n  }\n  switch (align) {\n    case \"justify\":\n    case \"justify-left\":\n    case \"justify-all\":\n      return \"left\";\n    case \"justify-center\":\n      return \"center\";\n    case \"justify-right\":\n      return \"right\";\n    default:\n      return align as AlignClassic;\n  }\n};\n","import { convertUnsupportedAlignment, extractDecorations } from \"./style\";\nimport { capitalize } from \"./stringUtil\";\nimport {\n  last,\n  first,\n  assoc,\n  mapProp,\n  flatReduce,\n  Unary,\n} from \"./functionalUtils\";\nimport { getFontPropertiesOfText } from \"./pixiUtils\";\nimport * as PIXI from \"pixi.js\";\nimport {\n  Align,\n  Bounds,\n  Point,\n  StyledTokens,\n  FinalToken,\n  StyledToken,\n  TextToken,\n  SpriteToken,\n  SplitStyle,\n  TextStyleExtended,\n  IFontMetrics,\n  isNewlineToken,\n  isWhitespaceToken,\n  IMG_DISPLAY_PROPERTY,\n  isSpriteToken,\n  ParagraphToken,\n  LineToken,\n  WordToken,\n  Nested,\n  isNotWhitespaceToken,\n  VAlign,\n  createEmptyFinalToken,\n  FontMap,\n} from \"./types\";\n\nconst ICON_SCALE_BASE = 0.8;\n\nconst sizer = new PIXI.Text(\"\");\n\n/**\n * Translates the current location point to the beginning of the next line.\n *\n * @param offset An offset coordinate. The function will make a clone of this with new coordinates.\n * @param largestLineHeight The largest height in the line of text.\n * @param lineSpacing The amount of extra space to insert between each line.\n */\nexport const updateOffsetForNewLine = (\n  offset: Point,\n  largestLineHeight: number,\n  lineSpacing: number\n): Point => new PIXI.Point(0, offset.y + largestLineHeight + lineSpacing);\n\nconst rectFromContainer = (\n  container: PIXI.Container,\n  offset: Point = { x: 0, y: 0 }\n): Bounds => {\n  const w = container.width;\n  const h = container.height;\n  const x = offset.x + container.x;\n  const y = offset.y + container.y;\n\n  return new PIXI.Rectangle(x, y, w, h);\n};\n\n/**\n * Move a point by an offset.\n * Point p => p -> p-> -> p\n * @param offset Amount to translate the target.\n * @param point Target to translate.\n */\nexport const translatePoint =\n  <P extends Point>(offset: Point) =>\n  (point: P): P => ({\n    ...point,\n    x: point.x + offset.x,\n    y: point.y + offset.y,\n  });\n\n/**\n * Same as translatePoint but for all the points in an array.\n */\nexport const translateLine =\n  (offset: Point) =>\n  (line: Bounds[]): Bounds[] =>\n    line.map(translatePoint(offset));\n\nexport const translateWordPosition =\n  (offset: Point) =>\n  (word: WordToken): WordToken =>\n    word.map((token) =>\n      mapProp<Bounds, FinalToken>(\"bounds\")(translatePoint(offset))(token)\n    );\n\nexport const translateTokenLine =\n  (offset: Point) =>\n  (line: LineToken): LineToken =>\n    line.map(translateWordPosition(offset));\n\nexport const lineWidth = (wordsInLine: Bounds[]): number => {\n  const firstWord = first(wordsInLine);\n  const lastWord = last(wordsInLine);\n\n  if (firstWord === undefined) {\n    return 0;\n  }\n  if (lastWord === firstWord) {\n    return firstWord.width;\n  }\n  return lastWord.x + lastWord.width - firstWord.x;\n};\n\nexport const center = (x: number, context: number): number => (context - x) / 2;\n\nconst setBoundsX = assoc<Bounds, number>(\"x\");\n\nconst positionWordX =\n  (x: number) =>\n  (word: WordToken): WordToken => {\n    let prevBounds: Bounds;\n    return word.map((token) => {\n      if (prevBounds === undefined) {\n        token.bounds.x = x;\n        prevBounds = token.bounds;\n      } else {\n        token.bounds.x = prevBounds.x + prevBounds.width;\n        prevBounds = token.bounds;\n      }\n      return token;\n    });\n  };\n\nexport const concatBounds = (\n  originalBounds: Bounds = { x: NaN, y: NaN, width: NaN, height: NaN },\n  bounds: Bounds = { x: NaN, y: NaN, width: NaN, height: NaN }\n): Bounds => {\n  if (isNaN(originalBounds.x)) {\n    return bounds;\n  }\n\n  const x = Math.min(originalBounds.x, bounds.x);\n  const y = Math.min(originalBounds.y, bounds.y);\n  const right = Math.max(\n    originalBounds.x + originalBounds.width,\n    bounds.x + bounds.width\n  );\n  const bottom = Math.max(\n    originalBounds.y + originalBounds.height,\n    bounds.y + bounds.height\n  );\n  const width = right - x;\n  const height = bottom - y;\n\n  return { x, y, width, height };\n};\n\nconst getCombinedBounds = (bounds: Bounds[]): Bounds =>\n  bounds.reduce(concatBounds, { x: NaN, y: NaN, width: NaN, height: NaN });\n\nexport const getBoundsNested: Unary<Nested<FinalToken>, Bounds> = flatReduce<\n  FinalToken,\n  Bounds\n>((acc: Bounds, t: FinalToken) => concatBounds(acc, t.bounds), {\n  x: NaN,\n  y: NaN,\n  width: NaN,\n  height: NaN,\n});\n\ntype AlignFunction = (line: Bounds[]) => Bounds[];\ntype AlignFunctionMaxWidth = (maxWidth: number) => AlignFunction;\n\nexport const alignLeft: AlignFunction = (line) =>\n  line.reduce(\n    (newLine: Bounds[], bounds: Bounds, i: number): Bounds[] =>\n      // is first word?\n      i === 0\n        ? [setBoundsX(0)(bounds)]\n        : newLine.concat([\n            setBoundsX(newLine[i - 1].x + newLine[i - 1].width)(bounds),\n          ]),\n    []\n  );\n\nexport const alignRight: AlignFunctionMaxWidth = (maxWidth) => (line) =>\n  translateLine({\n    x: maxWidth - lineWidth(line),\n    y: 0,\n  })(alignLeft(line));\n\nexport const alignCenter: AlignFunctionMaxWidth = (maxWidth) => (line) =>\n  translateLine({ x: center(lineWidth(line), maxWidth), y: 0 })(\n    alignLeft(line)\n  );\n\nexport const alignJustify: AlignFunctionMaxWidth = (maxLineWidth) => (line) => {\n  const count = line.length;\n  if (count === 0) {\n    return [];\n  }\n\n  const nonZeroWidthWords: Bounds[] = line.filter(({ width }) => width > 0);\n  const countNonZeroWidthWords = nonZeroWidthWords.length;\n\n  if (countNonZeroWidthWords === 1) {\n    const [first, ...rest] = line;\n    first.x = 0;\n    return [first, ...rest];\n  }\n\n  const result: Bounds[] = [];\n  const combinedBounds = getCombinedBounds(nonZeroWidthWords);\n  const w = combinedBounds.width;\n  const totalSpace = maxLineWidth - w;\n  const spacerWidth = totalSpace / (countNonZeroWidthWords - 1);\n\n  let previousWord;\n  for (let i = 0; i < line.length; i++) {\n    const bounds = line[i];\n    if (bounds.width === 0) {\n      result[i] = { ...bounds };\n      continue;\n    }\n    let x;\n    if (previousWord === undefined) {\n      x = 0;\n    } else {\n      x = previousWord.x + previousWord.width + spacerWidth;\n    }\n    if (isNaN(x)) {\n      throw new Error(\n        `Something went wrong with the justified layout calculation. x is NaN.`\n      );\n    }\n    const newWord: Bounds = setBoundsX(x)(bounds);\n    previousWord = newWord;\n    result[i] = newWord;\n  }\n  return result;\n};\n\nexport const alignLines = (\n  align: Align,\n  maxWidth: number,\n  lines: ParagraphToken\n): ParagraphToken => {\n  // do horizontal alignment.\n  let alignFunction: AlignFunction;\n  let lastAlignFunction: AlignFunction;\n  switch (align) {\n    case \"left\":\n      alignFunction = alignLeft;\n      lastAlignFunction = alignFunction;\n      break;\n    case \"right\":\n      alignFunction = alignRight(maxWidth);\n      lastAlignFunction = alignFunction;\n      break;\n    case \"center\":\n      alignFunction = alignCenter(maxWidth);\n      lastAlignFunction = alignFunction;\n      break;\n    case \"justify\":\n    case \"justify-left\":\n      alignFunction = alignJustify(maxWidth);\n      lastAlignFunction = alignLeft;\n      break;\n    case \"justify-right\":\n      alignFunction = alignJustify(maxWidth);\n      lastAlignFunction = alignRight(maxWidth);\n      break;\n    case \"justify-center\":\n      alignFunction = alignJustify(maxWidth);\n      lastAlignFunction = alignCenter(maxWidth);\n      break;\n    case \"justify-all\":\n      alignFunction = alignJustify(maxWidth);\n      lastAlignFunction = alignFunction;\n      break;\n    default:\n      throw new Error(\n        `Unsupported alignment type ${align}! Use one of : \"left\", \"right\", \"center\", \"justify\", \"justify-left\", \"justify-right\", justify-center\", \"justify-all\"`\n      );\n  }\n\n  for (const line of lines) {\n    const isLastLine =\n      // line is the last in the group OR\n      lines.indexOf(line) === lines.length - 1 ||\n      // line contains newline character\n      line.flat(2).filter(isNewlineToken).length > 0;\n\n    const wordBoundsForLine: Bounds[] = [];\n    let alignedLine;\n    for (const word of line) {\n      const wordBounds = getBoundsNested(word);\n      wordBoundsForLine.push(wordBounds);\n      if (isNaN(wordBounds.x)) {\n        throw new Error(\"wordBounds not correct\");\n      }\n    }\n    if (isLastLine) {\n      alignedLine = lastAlignFunction(wordBoundsForLine);\n    } else {\n      alignedLine = alignFunction(wordBoundsForLine);\n    }\n    for (let i = 0; i < line.length; i++) {\n      const bounds = alignedLine[i];\n      const word = line[i];\n      line[i] = positionWordX(bounds.x)(word);\n    }\n  }\n  return lines;\n};\n\nconst getTallestToken = (line: LineToken): FinalToken =>\n  flatReduce<FinalToken, FinalToken>((tallest, current) => {\n    let h = current.bounds.height ?? 0;\n    if (isSpriteToken(current)) {\n      h += current.fontProperties.descent;\n    }\n    if (h > (tallest?.bounds.height ?? 0)) {\n      return current;\n    }\n    return tallest;\n  }, createEmptyFinalToken())(line);\n\n/**\n * @param If you want to override the valign from the styles object, set it here.\n */\nexport const verticalAlignInLines = (\n  lines: ParagraphToken,\n  lineSpacing: number,\n  overrideValign?: VAlign\n): ParagraphToken => {\n  let previousTallestToken: FinalToken = createEmptyFinalToken();\n  let previousLineBottom = 0;\n  let paragraphModifier = 0;\n\n  const newLines: ParagraphToken = [];\n\n  for (const line of lines) {\n    const newLine: LineToken = [];\n\n    let tallestToken: FinalToken = getTallestToken(line);\n    // Note, paragraphModifier from previous line applied here.\n    let tallestHeight = (tallestToken.bounds?.height ?? 0) + paragraphModifier;\n    let tallestAscent =\n      (tallestToken.fontProperties?.ascent ?? 0) + paragraphModifier;\n    const valignParagraphModifier = paragraphModifier;\n    paragraphModifier = 0;\n\n    const lastToken = line[line.length - 1][0];\n    if (isNewlineToken(lastToken)) {\n      // Note, this will get applied on the NEXT line\n      paragraphModifier = tallestToken.style.paragraphSpacing ?? 0;\n    }\n    if (isSpriteToken(tallestToken)) {\n      tallestHeight += tallestToken.fontProperties.descent;\n      tallestAscent = tallestToken.bounds.height;\n    }\n\n    if (tallestHeight === 0) {\n      tallestToken = previousTallestToken;\n    } else {\n      previousTallestToken = tallestToken;\n    }\n\n    for (const word of line) {\n      const newWord: WordToken = [];\n      for (const segment of word) {\n        const { bounds, fontProperties, style } = segment;\n        const { height } = bounds;\n\n        const newBounds: Bounds = { ...bounds };\n        const valign = overrideValign ?? style.valign;\n\n        let { ascent } = fontProperties;\n        if (isSpriteToken(segment)) {\n          ascent = segment.bounds.height;\n        }\n\n        if (isNewlineToken(segment)) {\n          const newToken = {\n            ...segment,\n          };\n          newToken.bounds.y = previousLineBottom + tallestAscent - ascent;\n          newWord.push(newToken);\n          continue;\n        }\n\n        // Every valignment starts at the previous line bottom.\n        let newY = previousLineBottom;\n        switch (valign) {\n          case \"bottom\":\n            newY += tallestHeight - height;\n            break;\n          case \"middle\":\n            // Need to account for how paragraph spacing affects the middle positioning.\n            newY += (tallestHeight + valignParagraphModifier - height) / 2;\n            break;\n          case \"top\":\n            // Normally the change would be 0px but we need to account for paragraph spacing.\n            newY += valignParagraphModifier;\n            break;\n          case \"baseline\":\n          default:\n            newY += tallestAscent - ascent;\n        }\n        newBounds.y = newY;\n\n        const newToken = {\n          ...segment,\n          bounds: newBounds,\n        };\n        newWord.push(newToken);\n      }\n      newLine.push(newWord);\n    }\n\n    previousLineBottom += tallestHeight + lineSpacing;\n    newLines.push(newLine);\n  }\n\n  return newLines;\n};\n\nexport const collapseWhitespacesOnEndOfLines = (\n  lines: ParagraphToken\n): ParagraphToken => {\n  for (const line of lines) {\n    const l = line.length;\n    let i = l;\n    while (i >= 0) {\n      i -= 1;\n      const word = line[i];\n      if (isNotWhitespaceToken(word)) {\n        break;\n      } else {\n        for (const token of word) {\n          token.bounds.width = 0;\n          token.bounds.height = Math.min(\n            token.bounds.height,\n            token.fontProperties.fontSize\n          );\n        }\n      }\n    }\n  }\n  return lines;\n};\n\nconst layout = (\n  tokens: FinalToken[],\n  maxWidth: number,\n  lineSpacing: number,\n  align: Align\n): ParagraphToken => {\n  const cursor = { x: 0, y: 0 };\n  let wordWidth = 0;\n  let word: WordToken = [];\n  let line: LineToken = [];\n  const allLines: ParagraphToken = [];\n  let tallestHeightInLine = 0;\n\n  function addWordBufferToLineBuffer() {\n    if (word !== undefined && word.length > 0) {\n      // add word to line\n      line.push(word);\n    }\n\n    // reset word buffer\n    word = [];\n    wordWidth = 0;\n  }\n\n  function addLineToListOfLines() {\n    allLines.push(line);\n    line = [];\n  }\n\n  function addLineToListOfLinesAndMoveCursorToNextLine(token: FinalToken) {\n    // finalize Line\n    addLineToListOfLines();\n\n    // move cursor to next line\n    cursor.x = 0;\n    cursor.y = cursor.y + tallestHeightInLine;\n\n    // reset tallestHeight\n    tallestHeightInLine = 0;\n    setTallestHeight(token);\n  }\n\n  function setTallestHeight(token?: FinalToken): void {\n    const fontSize = token?.fontProperties?.fontSize ?? 0;\n    const height = token?.bounds?.height ?? 0;\n\n    tallestHeightInLine = Math.max(tallestHeightInLine, fontSize, lineSpacing);\n\n    // Don't try to measure the height of newline tokens\n    if (isNewlineToken(token) === false) {\n      tallestHeightInLine = Math.max(tallestHeightInLine, height);\n    }\n  }\n\n  function positionTokenAtCursorAndAdvanceCursor(token: FinalToken): void {\n    // position token at cursor\n    setTallestHeight(token);\n    token.bounds.x = cursor.x;\n    token.bounds.y = cursor.y;\n    // advance cursor\n    cursor.x += token.bounds.width;\n  }\n\n  function positionWordBufferAtCursorAndAdvanceCursor(): void {\n    word.forEach(positionTokenAtCursorAndAdvanceCursor);\n  }\n\n  function wordInBufferExceedsLineLength(): boolean {\n    return cursor.x + wordWidth > maxWidth;\n  }\n\n  function isBlockImage(token: FinalToken): boolean {\n    return token.style[IMG_DISPLAY_PROPERTY] === \"block\";\n  }\n\n  function addTokenToWordAndUpdateWordWidth(token: FinalToken): void {\n    // add the token to the current word buffer.\n    word.push(token);\n    wordWidth += token.bounds.width;\n  }\n\n  let token;\n  for (let i = 0; i < tokens.length; i++) {\n    token = tokens[i];\n    const isWhitespace = isWhitespaceToken(token);\n    const isNewline = isNewlineToken(token);\n    const isImage = isSpriteToken(token);\n    const isWordEndingToken = isWhitespace || isImage;\n\n    if (isWordEndingToken) {\n      positionWordBufferAtCursorAndAdvanceCursor();\n      addWordBufferToLineBuffer();\n    }\n\n    addTokenToWordAndUpdateWordWidth(token);\n    setTallestHeight(token);\n\n    // always immediately add whitespace to the line.\n    if (isWhitespace) {\n      positionWordBufferAtCursorAndAdvanceCursor();\n      addWordBufferToLineBuffer();\n    }\n\n    // If the token is a newline character,\n    // move the cursor to next line immediately\n    if (isNewline || isBlockImage(token)) {\n      addLineToListOfLinesAndMoveCursorToNextLine(token);\n    } else if (wordInBufferExceedsLineLength()) {\n      // don't wrap if it's the first word in the line.\n      if (line.length > 0) {\n        addLineToListOfLinesAndMoveCursorToNextLine(token);\n      }\n    }\n  }\n\n  // After we reach the last token, add it to the word and finalize both buffers.\n  if (word.length > 0) {\n    positionWordBufferAtCursorAndAdvanceCursor();\n    addWordBufferToLineBuffer();\n  }\n  if (line.length > 0) {\n    addLineToListOfLines();\n  }\n\n  const collapsedWhitespace = collapseWhitespacesOnEndOfLines(allLines);\n  const alignedLines = alignLines(align, maxWidth, collapsedWhitespace);\n  const valignedLines = verticalAlignInLines(alignedLines, lineSpacing);\n\n  return valignedLines;\n};\n\nconst notEmptyString = (s: string) => s !== \"\";\n\nconst SPLIT_MARKER = `_🔪_`;\nexport const splitAroundWhitespace = (s: string): string[] =>\n  s\n    .replace(/\\s/g, `${SPLIT_MARKER}$&${SPLIT_MARKER}`)\n    .split(SPLIT_MARKER)\n    .filter((s) => s !== \"\");\n\nexport const splitText = (s: string, splitStyle: SplitStyle): string[] => {\n  if (splitStyle === \"words\") {\n    return [s].flatMap(splitAroundWhitespace).filter(notEmptyString);\n  } else if (splitStyle === \"characters\") {\n    return s.split(\"\");\n  } else {\n    // unsupported splitStyle.\n    let suggestion = ` Supported styles are \"words\" and \"characters\"`;\n    const badStyle = (splitStyle as string).toLowerCase();\n    if (badStyle.indexOf(\"char\") === 0) {\n      suggestion = `Did you mean \"characters\"?`;\n    } else if (badStyle.indexOf(\"wor\") === 0) {\n      suggestion = `Did you mean \"words\"?`;\n    }\n    throw new Error(`Unsupported split style \"${splitStyle}\". ${suggestion}`);\n  }\n};\n\nexport const calculateFinalTokens = (\n  styledTokens: StyledTokens,\n  splitStyle: SplitStyle = \"words\",\n  scaleIcons = true,\n  adjustFontBaseline?: FontMap\n): ParagraphToken => {\n  // Create a text field to use for measurements.\n  const defaultStyle = styledTokens.style;\n\n  let fontProperties: IFontMetrics;\n\n  const generateFinalTokenFromStyledToken =\n    (style: TextStyleExtended, tags: string) =>\n    (token: StyledToken | TextToken | SpriteToken): FinalToken[] => {\n      let output: FinalToken[] = [];\n\n      const alignClassic = convertUnsupportedAlignment(style.align);\n\n      sizer.style = {\n        ...style,\n        align: alignClassic,\n        // Override some styles for the purposes of sizing text.\n        wordWrap: false,\n        dropShadowBlur: 0,\n        dropShadowDistance: 0,\n        dropShadowAngle: 0,\n        dropShadow: false,\n      };\n\n      if (typeof token === \"string\") {\n        // split into pieces and convert into tokens.\n\n        const textSegments = splitText(token, splitStyle);\n\n        const textTokens = textSegments.map((str): FinalToken => {\n          switch (style.textTransform) {\n            case \"uppercase\":\n              sizer.text = str.toUpperCase();\n              break;\n            case \"lowercase\":\n              sizer.text = str.toLowerCase();\n              break;\n            case \"capitalize\":\n              sizer.text = capitalize(str);\n              break;\n            default:\n              sizer.text = str;\n          }\n\n          const sw = style.fontScaleWidth ?? 1.0;\n          const sh = style.fontScaleHeight ?? 1.0;\n          // clamp negative or NaN fontScales to 0\n          const scaleWidth = isNaN(sw) || sw < 0 ? 0.0 : sw;\n          const scaleHeight = isNaN(sh) || sh < 0 ? 0.0 : sh;\n\n          sizer.scale.set(scaleWidth, scaleHeight);\n\n          fontProperties = { ...getFontPropertiesOfText(sizer, true) };\n\n          fontProperties.ascent *= scaleHeight;\n          fontProperties.descent *= scaleHeight;\n          fontProperties.fontSize *= scaleHeight;\n\n          const bounds = rectFromContainer(sizer);\n          // bounds.height = fontProperties.fontSize;\n\n          // Incorporate the size of the stroke into the size of the text.\n          const stroke = sizer.style.strokeThickness ?? 0;\n          if (stroke > 0) {\n            fontProperties.descent += stroke / 2;\n            fontProperties.ascent += stroke / 2;\n            fontProperties.fontSize =\n              fontProperties.ascent + fontProperties.descent;\n          }\n\n          const textDecorations = extractDecorations(\n            style,\n            bounds,\n            fontProperties\n          );\n\n          const baselineAdjustment = getBaselineAdjustment(\n            style,\n            adjustFontBaseline,\n            fontProperties.ascent\n          );\n          fontProperties.ascent += baselineAdjustment;\n\n          const { letterSpacing } = style;\n          if (letterSpacing) {\n            bounds.width += letterSpacing;\n          }\n\n          return {\n            content: str,\n            style,\n            tags,\n            bounds,\n            fontProperties,\n            textDecorations,\n          };\n        });\n\n        output = output.concat(textTokens);\n      } else if (token instanceof PIXI.Sprite) {\n        const sprite = token;\n        const imgDisplay = style[IMG_DISPLAY_PROPERTY];\n        // const isBlockImage = imgDisplay === \"block\";\n        const isIcon = imgDisplay === \"icon\";\n        fontProperties = { ...getFontPropertiesOfText(sizer, true) };\n\n        if (isIcon) {\n          // Set to minimum of 1 to avoid devide by zero.\n          // if it's height is zero or one it probably hasn't loaded yet.\n          // It will get refreshed after it loads.\n          const h = Math.max(sprite.height, 1);\n\n          if (h > 1 && sprite.scale.y === 1) {\n            const ratio = (fontProperties.ascent / h) * ICON_SCALE_BASE;\n            sprite.scale.set(ratio);\n          }\n\n          if (scaleIcons) {\n            const {\n              fontScaleWidth: scaleX = 1.0,\n              fontScaleHeight: scaleY = 1.0,\n            } = style;\n            sprite.scale.x *= scaleX;\n            sprite.scale.y *= scaleY;\n          }\n        }\n\n        // handle images\n        const bounds = rectFromContainer(sprite);\n\n        const { letterSpacing } = style;\n        if (letterSpacing && isIcon) {\n          bounds.width += letterSpacing;\n        }\n\n        output.push({\n          content: sprite,\n          style,\n          tags,\n          bounds,\n          fontProperties,\n          textDecorations: undefined,\n        });\n      } else {\n        // token is a composite\n        const styledToken = token as StyledToken;\n        const { children } = styledToken;\n        // set tags and styles for children of this composite token.\n        const newStyle = styledToken.style;\n        const newTags = styledToken.tags;\n\n        if (newStyle === undefined) {\n          throw new Error(\n            `Expected to find a 'style' property on ${styledToken}`\n          );\n        }\n\n        output = output.concat(\n          children.flatMap(generateFinalTokenFromStyledToken(newStyle, newTags))\n        );\n      }\n      return output;\n    };\n\n  // when starting out, use the default style\n  const tags = \"\";\n  const style: TextStyleExtended = defaultStyle;\n\n  const finalTokens = styledTokens.children.flatMap(\n    generateFinalTokenFromStyledToken(style, tags)\n  );\n\n  const { wordWrap: ww, wordWrapWidth: www } = defaultStyle;\n  const hasWordWrapWidth = www !== undefined && isNaN(www) === false && www > 0;\n  const maxWidth =\n    ww && hasWordWrapWidth ? (www as number) : Number.POSITIVE_INFINITY;\n\n  const lineSpacing = defaultStyle.lineSpacing ?? 0;\n  const align = defaultStyle.align ?? \"left\";\n\n  const lines = layout(finalTokens, maxWidth, lineSpacing, align);\n\n  return lines;\n};\n\nexport const getBaselineAdjustment = (\n  style: TextStyleExtended,\n  fontBaselineMap: FontMap = {},\n  ascent: number\n): number => {\n  const fontFamily = style.fontFamily?.toString() ?? \"\";\n  const adjustBaseline = style.adjustBaseline ?? 0;\n  const adjustFontBaseline = fontBaselineMap[fontFamily] ?? null;\n\n  let finalValue = adjustBaseline;\n  if (typeof adjustFontBaseline === \"string\") {\n    const percentPair = adjustFontBaseline.split(\"%\");\n    const isPercent = percentPair.length > 1;\n    const value = Number(percentPair[0]);\n\n    if (isPercent) {\n      finalValue += ascent * (value / 100);\n    } else {\n      finalValue += value;\n    }\n  } else {\n    finalValue += Number(adjustFontBaseline);\n  }\n  return finalValue;\n};\n","import * as PIXI from \"pixi.js\";\nimport {\n  TaggedTextOptions,\n  TextStyleSet,\n  TextStyleExtended,\n  TagWithAttributes,\n  AttributesList,\n  ImageMap,\n  ImageSourceMap,\n  IMG_REFERENCE_PROPERTY,\n  FinalToken,\n  isSpriteToken,\n  TextFinalToken,\n  isTextToken,\n  isNotWhitespaceToken,\n  isNewlineToken,\n  isWhitespaceToken,\n  Point,\n  ParagraphToken,\n  TextDecorationMetrics,\n  isSpriteSource,\n  isTextureSource,\n} from \"./types\";\n\nimport { parseTagsNew, removeTags, EMOJI_TAG } from \"./tags\";\nimport {\n  combineAllStyles,\n  convertUnsupportedAlignment,\n  DEFAULT_STYLE,\n  getStyleForTag as getStyleForTagExt,\n  mapTagsToStyles,\n} from \"./style\";\nimport { calculateFinalTokens, getBoundsNested } from \"./layout\";\nimport { capitalize } from \"./stringUtil\";\nimport { fontSizeStringToNumber } from \"./pixiUtils\";\nimport { logWarning as _logWarning } from \"./errorMessaging\";\n\nexport const DEFAULT_OPTIONS: TaggedTextOptions = {\n  debug: false,\n  debugConsole: false,\n  splitStyle: \"words\",\n  imgMap: {},\n  scaleIcons: true,\n  skipUpdates: false,\n  skipDraw: false,\n  drawWhitespace: false,\n  wrapEmoji: true,\n  errorHandler: undefined,\n  supressConsole: false,\n};\n\n// TODO: make customizable\nconst DEBUG = {\n  WORD_STROKE_COLOR: 0xffcccc,\n  WORD_FILL_COLOR: 0xeeeeee,\n  TEXT_FIELD_STROKE_COLOR: 0xff00ff,\n  WHITESPACE_COLOR: 0xcccccc,\n  WHITESPACE_STROKE_COLOR: 0xaaaaaa,\n  BASELINE_COLOR: 0xffff99,\n  LINE_COLOR: 0xffff00,\n  OUTLINE_COLOR: 0xffcccc,\n  OUTLINE_SHADOW_COLOR: 0x000000,\n  TEXT_STYLE: {\n    fontFamily: \"courier\",\n    fontSize: 10,\n    fill: 0xffffff,\n    dropShadow: true,\n  },\n};\nconst DEFAULT_STYLE_SET = { default: DEFAULT_STYLE };\n\nObject.freeze(DEFAULT_STYLE_SET);\nObject.freeze(DEFAULT_STYLE);\n\nconst DEFAULT_DESTROY_OPTIONS: PIXI.IDestroyOptions = {\n  children: true,\n  texture: true,\n};\n\nexport default class TaggedText extends PIXI.Sprite {\n  public static get defaultStyles(): TextStyleSet {\n    return DEFAULT_STYLE_SET;\n  }\n  public static get defaultOptions(): TaggedTextOptions {\n    return DEFAULT_OPTIONS;\n  }\n\n  // todo: allow setting options after the constructor is called. Make sure to call update()\n  /** Settings for the TaggedText component. */\n  private _options: TaggedTextOptions;\n  public get options(): TaggedTextOptions {\n    return this._options;\n  }\n\n  private _needsUpdate = true;\n  public get needsUpdate(): boolean {\n    return this._needsUpdate;\n  }\n  private _needsDraw = true;\n  public get needsDraw(): boolean {\n    return this._needsDraw;\n  }\n\n  private _tokens: ParagraphToken = [];\n  public get tokensFlat(): FinalToken[] {\n    return this._tokens.flat(3);\n  }\n  /**\n   * Tokens representing parsed out and styled tagged text. This is generated by update.\n   * They contain all the information needed to render the text fields and other children in your component.\n   */\n  public get tokens(): ParagraphToken {\n    return this._tokens;\n  }\n\n  private _text = \"\";\n  public get text(): string {\n    return this._text;\n  }\n\n  /**\n   * Alternative implicit setter for text. Always uses default for skipUpdate.\n   */\n  public set text(text: string) {\n    this.setText(text);\n  }\n\n  /**\n   * Setter for text that allows you to override the default for skipping the update.\n   * @param text Text to add to component with (optional) tags.\n   * @param skipUpdate *For advanced users* overrides default for upating / redrawing after changing the text.\n   * When true, setText() never updates even if default is false, and vice versa.\n   * Options are true, false, or undefined. Undefined is the default and means it uses whatever setting\n   * is provided in this.options.\n   */\n  public setText(text: string, skipUpdate?: boolean): void {\n    if (text === this._text && this._needsUpdate === false) {\n      return;\n    }\n    this._text = text;\n    this._needsUpdate = true;\n    this.updateIfShould(skipUpdate);\n  }\n\n  /**\n   * Returns the text content with all tags stripped out.\n   */\n  public get untaggedText(): string {\n    return removeTags(this.text);\n  }\n\n  private _tagStyles: TextStyleSet = {};\n  public get tagStyles(): TextStyleSet {\n    return this._tagStyles;\n  }\n\n  /**\n   * Alternative implicit setter for tagStyles. Always uses default for skipUpdate.\n   */\n  public set tagStyles(styles: TextStyleSet) {\n    this.setTagStyles(styles);\n  }\n\n  /**\n   * Setter for tagStyles.\n   * @param styles Object with strings for keys representing tag names, mapped to style objects.\n   * @param skipUpdate *For advanced users* overrides default for upating / redrawing after changing the styles.\n   * When true, setTagStyles() never updates even if default is false, and vice versa.\n   * Options are true, false, or undefined. Undefined is the default and means it uses whatever setting\n   * is provided in this.options.\n   */\n  public setTagStyles(styles: TextStyleSet, skipUpdate?: boolean): void {\n    Object.entries(styles).forEach(([tag, style]) =>\n      this.setStyleForTag(tag, style, true)\n    );\n    // TODO: add a way to test for identical styles to prevent unnecessary updates.\n    this._needsUpdate = true;\n    this.updateIfShould(skipUpdate);\n  }\n\n  public getStyleForTag(\n    tag: string,\n    attributes: AttributesList = {}\n  ): TextStyleExtended | undefined {\n    return getStyleForTagExt(tag, this.tagStyles, attributes);\n  }\n\n  public getStyleForTags(tags: TagWithAttributes[]): TextStyleExtended {\n    const styles = tags.map(({ tagName, attributes }) =>\n      this.getStyleForTag(tagName, attributes)\n    );\n    return combineAllStyles(styles);\n  }\n\n  /**\n   * Set a style to be used by a single tag.\n   * @param tag Name of the tag to set style for\n   * @param styles Style object to assign to the tag.\n   * @param skipUpdate *For advanced users* overrides default for upating / redrawing after changing the styles.\n   * When true, setStyleForTag() never updates even if default is false, and vice versa.\n   * Options are true, false, or undefined. Undefined is the default and means it uses whatever setting\n   * is provided in this.options.\n   */\n  public setStyleForTag(\n    tag: string,\n    styles: TextStyleExtended,\n    skipUpdate?: boolean\n  ): boolean {\n    this.tagStyles[tag] = styles;\n\n    // TODO: warn user when trying to set styles on a tag that doesn't support it...\n    // e.g. wordWrapWidth on a styel other than default.\n\n    // Override some settings on default styles.\n    if (tag === \"default\" && this.defaultStyle[IMG_REFERENCE_PROPERTY]) {\n      // prevents accidentally setting all text to images.\n      this.logWarning(\n        `${IMG_REFERENCE_PROPERTY}-on-default`,\n        `Style \"${IMG_REFERENCE_PROPERTY}\" can not be set on the \"default\" style because it will add images to EVERY tag!`\n      );\n      this.defaultStyle[IMG_REFERENCE_PROPERTY] = undefined;\n    }\n    // TODO: add a way to test for identical styles to prevent unnecessary updates.\n    this._needsUpdate = true;\n    this.updateIfShould(skipUpdate);\n\n    return true;\n  }\n  /**\n   * Removes a style associated with a tag. Note, inline attributes are not affected.\n   * @param tag Name of the tag to delete the style of.\n   * @param skipUpdate *For advanced users* overrides default for upating / redrawing after changing the styles.\n   * When true, removeStylesForTag() never updates even if default is false, and vice versa.\n   * Options are true, false, or undefined. Undefined is the default and means it uses whatever setting\n   * is provided in this.options.\n   */\n  public removeStylesForTag(tag: string, skipUpdate?: boolean): boolean {\n    if (tag in this.tagStyles) {\n      delete this.tagStyles[tag];\n\n      this._needsUpdate = true;\n      this.updateIfShould(skipUpdate);\n\n      return true;\n    }\n    return false;\n  }\n\n  public get defaultStyle(): TextStyleExtended {\n    return this.tagStyles?.default;\n  }\n  /**\n   * Alternative implicit setter for defaultStyle. Always uses default for skipUpdate.\n   */\n  public set defaultStyle(defaultStyles: TextStyleExtended) {\n    this.setDefaultStyle(defaultStyles);\n  }\n  /**\n   * Setter for default styles. A shortcut to this.setStyleForTag(\"default\",...)\n   * @param styles A style object to use as the default styles for all text in the component.\n   * @param skipUpdate *For advanced users* overrides default for upating / redrawing after changing the styles.\n   * When true, setDefaultStyle() never updates even if default is false, and vice versa.\n   * Options are true, false, or undefined. Undefined is the default and means it uses whatever setting\n   * is provided in this.options.\n   */\n  public setDefaultStyle(\n    defaultStyles: TextStyleExtended,\n    skipUpdate?: boolean\n  ): void {\n    this.setStyleForTag(\"default\", defaultStyles, skipUpdate);\n  }\n\n  // References to internal elements.\n  private _textFields: PIXI.Text[] = [];\n  public get textFields(): PIXI.Text[] {\n    return this._textFields;\n  }\n  private _sprites: PIXI.Sprite[] = [];\n  public get sprites(): PIXI.Sprite[] {\n    return this._sprites;\n  }\n  private _decorations: PIXI.Graphics[] = [];\n  public get decorations(): PIXI.Graphics[] {\n    return this._decorations;\n  }\n  private _spriteTemplates: ImageMap = {};\n  public get spriteTemplates(): ImageMap {\n    return this._spriteTemplates;\n  }\n  private _debugGraphics: PIXI.Graphics;\n\n  // Containers for children\n  private _textContainer: PIXI.Container;\n  public get textContainer(): PIXI.Container {\n    return this._textContainer;\n  }\n\n  private _decorationContainer: PIXI.Container;\n  public get decorationContainer(): PIXI.Container {\n    return this._decorationContainer;\n  }\n\n  private _spriteContainer: PIXI.Container;\n  public get spriteContainer(): PIXI.Container {\n    return this._spriteContainer;\n  }\n  private _debugContainer: PIXI.Container;\n  public get debugContainer(): PIXI.Container {\n    return this._debugContainer;\n  }\n\n  private logWarning = (code: string, message: string): void =>\n    _logWarning(\n      this.options.errorHandler,\n      this.options.supressConsole,\n      this\n    )(code, message);\n\n  constructor(\n    text = \"\",\n    tagStyles: TextStyleSet = {},\n    options: TaggedTextOptions = {},\n    texture?: PIXI.Texture\n  ) {\n    super(texture);\n\n    this._textContainer = new PIXI.Container();\n    this._spriteContainer = new PIXI.Container();\n    this._decorationContainer = new PIXI.Container();\n    this._debugContainer = new PIXI.Container();\n    this._debugGraphics = new PIXI.Graphics();\n\n    this.resetChildren();\n\n    const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n    this._options = mergedOptions;\n\n    tagStyles = { default: {}, ...tagStyles };\n\n    if (this.options.wrapEmoji) {\n      tagStyles[EMOJI_TAG] = { fontFamily: \"sans-serif\" };\n    }\n    const mergedDefaultStyles = { ...DEFAULT_STYLE, ...tagStyles.default };\n    tagStyles.default = mergedDefaultStyles;\n    this.tagStyles = tagStyles;\n\n    if (this.options.imgMap) {\n      this.createSpriteTemplatesFromSourceMap(this.options.imgMap);\n    }\n\n    this.text = text;\n  }\n\n  public destroyImgMap(): void {\n    if (this.destroyed) {\n      throw new Error(\n        \"destroyImgMap() was called after this object was already destroyed. You must call destroyImgMap() before destroy() because imgMap is cleared when the object is destroyed.\"\n      );\n    }\n\n    this._spriteContainer.destroy({\n      children: true,\n      texture: true,\n      baseTexture: true,\n    });\n  }\n\n  public destroy(options?: boolean | PIXI.IDestroyOptions): void {\n    let destroyOptions: PIXI.IDestroyOptions = {};\n    if (typeof options === \"boolean\") {\n      options = { children: options };\n    }\n    destroyOptions = { ...DEFAULT_DESTROY_OPTIONS, ...options };\n\n    // Do not destroy the sprites in the imgMap.\n    this._spriteContainer.destroy(false);\n\n    super.destroy(destroyOptions);\n\n    this._textFields = [];\n    this._sprites = [];\n    this._decorations = [];\n    this._spriteTemplates = {};\n    this._tokens = [];\n    this._tagStyles = {};\n    this._options.imgMap = {};\n    this._options.skipUpdates = true;\n    this._options.skipDraw = true;\n    this._options = {};\n  }\n\n  /**\n   * Removes all PIXI children from this component's containers.\n   * Deletes references to sprites and text fields.\n   */\n  private resetChildren() {\n    if (this._textContainer) {\n      this._textContainer.removeChildren();\n      this.removeChild(this._textContainer);\n    }\n    this._textContainer = new PIXI.Container();\n    this.addChild(this._textContainer);\n\n    if (this._spriteContainer) {\n      this._spriteContainer.removeChildren();\n      this.removeChild(this._spriteContainer);\n    }\n    this._spriteContainer = new PIXI.Container();\n    this.addChild(this._spriteContainer);\n\n    if (this._decorationContainer) {\n      this._decorationContainer.removeChildren();\n      this.removeChild(this._decorationContainer);\n    }\n    this._decorationContainer = new PIXI.Container();\n    this.addChild(this._decorationContainer);\n\n    if (this._debugContainer) {\n      this._debugContainer.removeChildren();\n      this.removeChild(this._debugContainer);\n    }\n    this._debugContainer = new PIXI.Container();\n    this.addChild(this._debugContainer);\n\n    this._textFields = [];\n    this._sprites = [];\n    this._decorations = [];\n  }\n\n  /**\n   * Creates associations between string-based keys like \"img\" and\n   * image Sprite objects which are included in the text.\n   * @param imgMap\n   */\n  private createSpriteTemplatesFromSourceMap(imgMap: ImageSourceMap) {\n    this._spriteTemplates = {};\n\n    Object.entries(imgMap).forEach(([key, spriteSource]) => {\n      const wrongFormatError = new TypeError(\n        `The spriteSource provided for key ${key} was not in a valid format. Please use a Sprite, Texture, BaseTexture, string, HTMLImageElement, HTMLVideoElement, HTMLCanvasElement, or SVGElement`\n      );\n      const destroyedError = new Error(\n        `The spriteSource provided for key ${key} appears to be a Sprite or Texture that has been destroyed or removed from PIXI.TextureCache probably using \\`destroy()\\` with aggressive options or \\`destroyImgMap()\\`.`\n      );\n      let error: Error | null = null;\n\n      let sprite: PIXI.Sprite = new PIXI.Sprite();\n\n      try {\n        if (spriteSource instanceof PIXI.Sprite) {\n          sprite = spriteSource;\n        }\n        // if the entry is not a sprite, attempt to load the sprite as if it is a reference to the sprite source (e.g. an Image element, url, or texture).\n        else if (isSpriteSource(spriteSource)) {\n          sprite = PIXI.Sprite.from(spriteSource);\n        } else if (isTextureSource(spriteSource)) {\n          sprite = PIXI.Sprite.from(PIXI.Texture.from(spriteSource));\n        } else {\n          error = wrongFormatError;\n          console.log(error);\n        }\n      } catch (e) {\n        error = e as Error;\n        console.log(error);\n      }\n\n      if (\n        (isSpriteSource(spriteSource) &&\n          (spriteSource as PIXI.Texture).baseTexture === null) ||\n        (sprite !== undefined &&\n          (sprite.destroyed || sprite.texture?.baseTexture === null))\n      ) {\n        error = destroyedError;\n        console.log(error);\n      }\n\n      if (error) {\n        throw error;\n      }\n\n      // Listen for changes to sprites (e.g. when they load.)\n      const texture = sprite.texture;\n\n      const onTextureUpdate = (baseTexture: PIXI.BaseTexture) => {\n        this.onImageTextureUpdate(baseTexture);\n        baseTexture.removeListener(\"update\", onTextureUpdate);\n      };\n\n      texture.baseTexture.addListener(\"update\", onTextureUpdate);\n\n      this.spriteTemplates[key] = sprite;\n\n      // create a style for each of these by default.\n      const existingStyle = this.getStyleForTag(key) ?? {};\n      const style = { [IMG_REFERENCE_PROPERTY]: key, ...existingStyle };\n      this.setStyleForTag(key, style);\n    });\n  }\n\n  private onImageTextureUpdate(baseTexture: PIXI.BaseTexture): void {\n    baseTexture;\n    this._needsUpdate = true;\n    this._needsDraw = true;\n    this.updateIfShould();\n  }\n\n  /**\n   * Determines whether to call update based on the parameter and the options set then calls it or sets needsUpdate to true.\n   * @param forcedSkipUpdate This is the parameter provided to some functions that allow you to skip the update.\n   * It's factored in along with the defaults to figure out what to do.\n   */\n  private updateIfShould(forcedSkipUpdate?: boolean): boolean {\n    if (\n      forcedSkipUpdate === false ||\n      (forcedSkipUpdate === undefined && this.options.skipUpdates === false)\n    ) {\n      this.update();\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Calculates styles, positioning, etc. of the text and styles and creates a\n   * set of objects that represent where each portion of text and image should\n   * be drawn.\n   * @param skipDraw *For advanced users* overrides default for redrawing the styles.\n   * When true, update() will skip the call to draw() (even if the default is false).\n   * Options are true, false, or undefined. Undefined is the default and means it uses whatever setting\n   * is provided in this.options.\n   */\n  public update(skipDraw?: boolean): ParagraphToken {\n    // Determine default style properties\n    const tagStyles = this.tagStyles;\n    const { splitStyle, scaleIcons } = this.options;\n    const spriteTemplates = this.options.imgMap && this.spriteTemplates;\n    // const wordWrapWidth = this.defaultStyle.wordWrap\n    //   ? this.defaultStyle.wordWrapWidth\n    //   : Number.POSITIVE_INFINITY;\n    // const align = this.defaultStyle.align;\n    // const lineSpacing = this.defaultStyle.lineSpacing;\n\n    // Pre-process text.\n    // Parse tags in the text.\n    const tagTokensNew = parseTagsNew(\n      this.text,\n      Object.keys(this.tagStyles),\n      this.options.wrapEmoji,\n      this.logWarning\n    );\n    // Assign styles to each segment.\n    const styledTokens = mapTagsToStyles(\n      tagTokensNew,\n      tagStyles,\n      spriteTemplates\n    );\n    // Measure font for each style\n    // Measure each segment\n    // Create the text segments, position and add them. (draw)\n    const newFinalTokens = calculateFinalTokens(\n      styledTokens,\n      splitStyle,\n      scaleIcons,\n      this.options.adjustFontBaseline\n    );\n\n    this._tokens = newFinalTokens;\n    this._needsDraw = true;\n\n    // Wait one frame to draw so that this doesn't happen multiple times in one frame.\n    // if (this.animationRequest) {\n    //   window.cancelAnimationFrame(this.animationRequest);\n    // }\n    // this.animationRequest = window.requestAnimationFrame(\n\n    this.drawIfShould(skipDraw);\n\n    if (this.options.debugConsole) {\n      console.log(this.toDebugString());\n    }\n\n    this._needsUpdate = false;\n\n    return newFinalTokens;\n  }\n\n  /**\n   * Determines whether to call draw() based on the parameter and the options set then calls it or sets needsDraw to true.\n   * @param forcedSkipDraw This is the parameter provided to some functions that allow you to skip the update.\n   * It's factored in along with the defaults to figure out what to do.\n   */\n  private drawIfShould(forcedSkipDraw?: boolean): boolean {\n    if (\n      forcedSkipDraw === false ||\n      (forcedSkipDraw === undefined && this.options.skipDraw === false)\n    ) {\n      this.draw();\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Create and position the display objects based on the tokens.\n   */\n  public draw(): void {\n    this.resetChildren();\n    if (this.textContainer === null || this.spriteContainer === null) {\n      throw new Error(\n        \"Somehow the textContainer or spriteContainer is null. This shouldn't be possible. Perhaps you've destroyed this object?\"\n      );\n    }\n    const textContainer = this.textContainer;\n    const spriteContainer = this.spriteContainer;\n\n    const { drawWhitespace } = this.options;\n    const tokens = drawWhitespace\n      ? this.tokensFlat\n      : // remove any tokens that are purely whitespace unless drawWhitespace is specified\n        this.tokensFlat.filter(isNotWhitespaceToken);\n\n    let drewDecorations = false;\n    let displayObject: PIXI.DisplayObject;\n\n    tokens.forEach((t) => {\n      if (isTextToken(t)) {\n        displayObject = this.createTextFieldForToken(t as TextFinalToken);\n        textContainer.addChild(displayObject);\n        this.textFields.push(displayObject as PIXI.Text);\n\n        if (t.textDecorations && t.textDecorations.length > 0) {\n          for (const d of t.textDecorations) {\n            const drawing = this.createDrawingForTextDecoration(d);\n            (displayObject as PIXI.Text).addChild(drawing);\n            this._decorations.push(drawing);\n          }\n          drewDecorations = true;\n        }\n      }\n      if (isSpriteToken(t)) {\n        displayObject = t.content as PIXI.Sprite;\n\n        this.sprites.push(displayObject as PIXI.Sprite);\n        spriteContainer.addChild(displayObject);\n      }\n\n      const { bounds } = t;\n      displayObject.x = bounds.x;\n      displayObject.y = bounds.y;\n    });\n\n    if (drawWhitespace === false && drewDecorations) {\n      this.logWarning(\n        \"text-decoration-and-whitespace\",\n        \"Text decorations, such as underlines, will not appear under whitespace unless the `drawWhitespace` option is set to `true`.\"\n      );\n    }\n\n    if (this.options.debug) {\n      this.drawDebug();\n    }\n    this._needsDraw = false;\n  }\n\n  private createDrawingForTextDecoration(\n    textDecoration: TextDecorationMetrics\n  ): PIXI.Graphics {\n    const { bounds } = textDecoration;\n    let { color } = textDecoration;\n    const drawing = new PIXI.Graphics();\n\n    if (typeof color === \"string\") {\n      if (color.indexOf(\"#\") === 0) {\n        color = \"0x\" + color.substring(1);\n        color = parseInt(color, 16) as number;\n      } else {\n        this.logWarning(\n          \"invalid-color\",\n          \"Sorry, at this point, only hex colors are supported for textDecorations like underlines. Please use either a hex number like 0x66FF33 or a string like '#66FF33'\"\n        );\n      }\n    }\n\n    drawing\n      .beginFill(color as number)\n      .drawRect(bounds.x, bounds.y, bounds.width, bounds.height)\n      .endFill();\n\n    return drawing;\n  }\n\n  private createTextFieldForToken(token: TextFinalToken): PIXI.Text {\n    const { textTransform = \"\" } = token.style;\n\n    let text = token.content;\n    switch (textTransform.toLowerCase()) {\n      case \"lowercase\":\n        text = text.toLowerCase();\n        break;\n      case \"uppercase\":\n        text = text.toUpperCase();\n        break;\n      case \"capitalize\":\n        text = capitalize(text);\n        break;\n      default:\n    }\n\n    const alignClassic = convertUnsupportedAlignment(token.style.align);\n    const sanitizedStyle = { ...token.style, align: alignClassic };\n\n    const textField = new PIXI.Text(text, sanitizedStyle);\n\n    let { fontScaleWidth = 1.0, fontScaleHeight = 1.0 } = token.style;\n    fontScaleWidth =\n      isNaN(fontScaleWidth) || fontScaleWidth < 0 ? 0 : fontScaleWidth;\n    fontScaleHeight =\n      isNaN(fontScaleHeight) || fontScaleHeight < 0 ? 0 : fontScaleHeight;\n\n    let finalScaleWidth = fontScaleWidth;\n    let finalScaleHeight = fontScaleHeight;\n    const largerScale = Math.max(fontScaleWidth, fontScaleHeight);\n\n    if (largerScale > 1) {\n      if (largerScale === fontScaleHeight) {\n        finalScaleWidth /= largerScale;\n        finalScaleHeight = 1.0;\n      } else {\n        finalScaleHeight /= largerScale;\n        finalScaleWidth = 1.0;\n      }\n\n      const fs = textField.style.fontSize ?? 0;\n      const fontSizePx =\n        (typeof fs === \"string\" ? fontSizeStringToNumber(fs) : fs) *\n        largerScale;\n\n      textField.style.fontSize = fontSizePx;\n    }\n\n    textField.scale.set(finalScaleWidth, finalScaleHeight);\n    return textField;\n  }\n\n  /**\n   * Converts the text properties from this.tokens into a human readable string.\n   * This is automatically logged to the console on update when debug option is set to true.\n   */\n  public toDebugString(): string {\n    const lines = this.tokens;\n    let s = this.untaggedText + \"\\n=====\\n\";\n    const nl = \"\\n    \";\n    if (lines !== undefined) {\n      s += lines.map((line, lineNumber) =>\n        line.map((word, wordNumber) =>\n          word\n            .map((token, tokenNumber) => {\n              let text = \"\";\n              if (isTextToken(token)) {\n                if (isNewlineToken(token)) {\n                  text = `\\\\n`;\n                } else {\n                  text = `\"${token.content}\"`;\n                }\n              } else if (isSpriteToken(token)) {\n                text = `[Image]`;\n              }\n              let s = `\\n${text}: (${lineNumber}/${wordNumber}/${tokenNumber})`;\n              s += `${nl}tags: ${\n                token.tags.length === 0\n                  ? \"<none>\"\n                  : token.tags\n                      .split(\",\")\n                      .map((tag) => `<${tag}>`)\n                      .join(\", \")\n              }`;\n              s += `${nl}style: ${Object.entries(token.style)\n                .map((e) => e.join(\":\"))\n                .join(\"; \")}`;\n              s += `${nl}size: x:${token.bounds.x} y:${token.bounds.y} width:${\n                token.bounds.width\n              } height:${token.bounds.height} bottom:${\n                token.bounds.height + token.bounds.y\n              } right:${token.bounds.x + token.bounds.width}`;\n              s += `${nl}font: fontSize:${token.fontProperties.fontSize} ascent:${token.fontProperties.ascent} descent:${token.fontProperties.descent}`;\n              return s;\n            })\n            .join(\"\\n\")\n        )\n      );\n    }\n    return s;\n  }\n\n  public drawDebug(): void {\n    const paragraph = this.tokens;\n    this._debugGraphics = new PIXI.Graphics();\n    if (this.debugContainer === null) {\n      throw new Error(\n        \"Somehow the debug container is null. This shouldn't be possible. Perhaps you've destroyed this object?\"\n      );\n    }\n    const debugContainer = this.debugContainer;\n    debugContainer.addChild(this._debugGraphics);\n\n    const g = this._debugGraphics;\n    g.clear();\n\n    // const { width, height } = this.getBounds();\n    // // frame shadow\n    // g.lineStyle(2, DEBUG.OUTLINE_SHADOW_COLOR, 0.5);\n    // // g.beginFill();\n    // g.drawRect(1, 1, width, height);\n    // // g.endFill();\n\n    // // frame\n    // g.lineStyle(2, DEBUG.OUTLINE_COLOR, 1);\n    // // g.beginFill();\n    // g.drawRect(0, 0, width - 1, height - 1);\n    // // g.endFill();\n\n    function createInfoText(text: string, position: Point): PIXI.Text {\n      const info = new PIXI.Text(text, DEBUG.TEXT_STYLE);\n      info.x = position.x + 1;\n      info.y = position.y + 1;\n      return info;\n    }\n\n    // for (const line of tokens) {\n    for (let lineNumber = 0; lineNumber < paragraph.length; lineNumber++) {\n      const line = paragraph[lineNumber];\n      const lineBounds = getBoundsNested(line);\n\n      if (this.defaultStyle.wordWrap) {\n        const w = this.defaultStyle.wordWrapWidth ?? this.width;\n        g.endFill()\n          .lineStyle(0.5, DEBUG.LINE_COLOR, 0.2)\n          .drawRect(0, lineBounds.y, w, lineBounds.height)\n          .endFill();\n      }\n\n      for (let wordNumber = 0; wordNumber < line.length; wordNumber++) {\n        const word = line[wordNumber];\n        for (const segmentToken of word) {\n          const isSprite = isSpriteToken(segmentToken);\n          const { x, y, width } = segmentToken.bounds;\n          const baseline =\n            y +\n            (isSprite\n              ? segmentToken.bounds.height\n              : segmentToken.fontProperties.ascent);\n\n          let { height } = segmentToken.bounds;\n          if (isSprite) {\n            height += segmentToken.fontProperties.descent;\n          }\n\n          if (\n            isWhitespaceToken(segmentToken) &&\n            this.options.drawWhitespace === false\n          ) {\n            g.lineStyle(1, DEBUG.WHITESPACE_STROKE_COLOR, 1).beginFill(\n              DEBUG.WHITESPACE_COLOR,\n              0.2\n            );\n          } else {\n            g.lineStyle(1, DEBUG.WORD_STROKE_COLOR, 1).beginFill(\n              DEBUG.WORD_FILL_COLOR,\n              0.2\n            );\n          }\n\n          if (isNewlineToken(segmentToken)) {\n            this.debugContainer.addChild(\n              createInfoText(\"↩︎\", { x, y: y + 10 })\n            );\n          } else {\n            g.lineStyle(0.5, DEBUG.LINE_COLOR, 0.2)\n              .drawRect(x, y, width, height)\n              .endFill()\n\n              .lineStyle(1, DEBUG.BASELINE_COLOR, 1)\n              .beginFill()\n              .drawRect(x, baseline, width, 1)\n              .endFill();\n          }\n\n          let info;\n          // info = `${token.bounds.width}⨉${token.bounds.height}`;\n          if (isTextToken(segmentToken)) {\n            // info += ` ${token.tags}`;\n            info = `${segmentToken.tags}`;\n            this.debugContainer.addChild(createInfoText(info, { x, y }));\n          }\n          // this.debugContainer.addChild(createInfoText(info, { x, y }));\n        }\n      }\n    }\n    // }\n\n    // Show the outlines of the actual text fields,\n    // not just where the tokens say they should be\n    // const fields: PIXI.Text[] = this.textFields;\n    // for (const text of fields) {\n    //   g.lineStyle(1, DEBUG.TEXT_FIELD_STROKE_COLOR, 1);\n    //   g.drawRect(text.x, text.y, text.width, text.height);\n    // }\n  }\n}\n","\"use strict\";\n\nmodule.exports = () => {\n  // https://mths.be/emoji\n  return /\\u{1F3F4}\\u{E0067}\\u{E0062}(?:\\u{E0077}\\u{E006C}\\u{E0073}|\\u{E0073}\\u{E0063}\\u{E0074}|\\u{E0065}\\u{E006E}\\u{E0067})\\u{E007F}|(?:\\u{1F9D1}\\u{1F3FF}\\u200D\\u2764\\uFE0F\\u200D(?:\\u{1F48B}\\u200D)?\\u{1F9D1}|\\u{1F469}\\u{1F3FF}\\u200D\\u{1F91D}\\u200D[\\u{1F468}\\u{1F469}])[\\u{1F3FB}-\\u{1F3FE}]|(?:\\u{1F9D1}\\u{1F3FE}\\u200D\\u2764\\uFE0F\\u200D(?:\\u{1F48B}\\u200D)?\\u{1F9D1}|\\u{1F469}\\u{1F3FE}\\u200D\\u{1F91D}\\u200D[\\u{1F468}\\u{1F469}])[\\u{1F3FB}-\\u{1F3FD}\\u{1F3FF}]|(?:\\u{1F9D1}\\u{1F3FD}\\u200D\\u2764\\uFE0F\\u200D(?:\\u{1F48B}\\u200D)?\\u{1F9D1}|\\u{1F469}\\u{1F3FD}\\u200D\\u{1F91D}\\u200D[\\u{1F468}\\u{1F469}])[\\u{1F3FB}\\u{1F3FC}\\u{1F3FE}\\u{1F3FF}]|(?:\\u{1F9D1}\\u{1F3FC}\\u200D\\u2764\\uFE0F\\u200D(?:\\u{1F48B}\\u200D)?\\u{1F9D1}|\\u{1F469}\\u{1F3FC}\\u200D\\u{1F91D}\\u200D[\\u{1F468}\\u{1F469}])[\\u{1F3FB}\\u{1F3FD}-\\u{1F3FF}]|(?:\\u{1F9D1}\\u{1F3FB}\\u200D\\u2764\\uFE0F\\u200D(?:\\u{1F48B}\\u200D)?\\u{1F9D1}|\\u{1F469}\\u{1F3FB}\\u200D\\u{1F91D}\\u200D[\\u{1F468}\\u{1F469}])[\\u{1F3FC}-\\u{1F3FF}]|\\u{1F468}(?:\\u{1F3FB}(?:\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\u{1F48B}\\u200D\\u{1F468}[\\u{1F3FB}-\\u{1F3FF}]|\\u{1F468}[\\u{1F3FB}-\\u{1F3FF}])|\\u{1F91D}\\u200D\\u{1F468}[\\u{1F3FC}-\\u{1F3FF}]|[\\u2695\\u2696\\u2708]\\uFE0F|[\\u{1F33E}\\u{1F373}\\u{1F37C}\\u{1F393}\\u{1F3A4}\\u{1F3A8}\\u{1F3EB}\\u{1F3ED}\\u{1F4BB}\\u{1F4BC}\\u{1F527}\\u{1F52C}\\u{1F680}\\u{1F692}\\u{1F9AF}-\\u{1F9B3}\\u{1F9BC}\\u{1F9BD}]))?|[\\u{1F3FC}-\\u{1F3FF}]\\u200D\\u2764\\uFE0F\\u200D(?:\\u{1F48B}\\u200D\\u{1F468}[\\u{1F3FB}-\\u{1F3FF}]|\\u{1F468}[\\u{1F3FB}-\\u{1F3FF}])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\u{1F48B}\\u200D)?\\u{1F468}|[\\u{1F468}\\u{1F469}]\\u200D(?:\\u{1F466}\\u200D\\u{1F466}|\\u{1F467}\\u200D[\\u{1F466}\\u{1F467}])|\\u{1F466}\\u200D\\u{1F466}|\\u{1F467}\\u200D[\\u{1F466}\\u{1F467}]|[\\u{1F33E}\\u{1F373}\\u{1F37C}\\u{1F393}\\u{1F3A4}\\u{1F3A8}\\u{1F3EB}\\u{1F3ED}\\u{1F4BB}\\u{1F4BC}\\u{1F527}\\u{1F52C}\\u{1F680}\\u{1F692}\\u{1F9AF}-\\u{1F9B3}\\u{1F9BC}\\u{1F9BD}])|\\u{1F3FF}\\u200D(?:\\u{1F91D}\\u200D\\u{1F468}[\\u{1F3FB}-\\u{1F3FE}]|[\\u{1F33E}\\u{1F373}\\u{1F37C}\\u{1F393}\\u{1F3A4}\\u{1F3A8}\\u{1F3EB}\\u{1F3ED}\\u{1F4BB}\\u{1F4BC}\\u{1F527}\\u{1F52C}\\u{1F680}\\u{1F692}\\u{1F9AF}-\\u{1F9B3}\\u{1F9BC}\\u{1F9BD}])|\\u{1F3FE}\\u200D(?:\\u{1F91D}\\u200D\\u{1F468}[\\u{1F3FB}-\\u{1F3FD}\\u{1F3FF}]|[\\u{1F33E}\\u{1F373}\\u{1F37C}\\u{1F393}\\u{1F3A4}\\u{1F3A8}\\u{1F3EB}\\u{1F3ED}\\u{1F4BB}\\u{1F4BC}\\u{1F527}\\u{1F52C}\\u{1F680}\\u{1F692}\\u{1F9AF}-\\u{1F9B3}\\u{1F9BC}\\u{1F9BD}])|\\u{1F3FD}\\u200D(?:\\u{1F91D}\\u200D\\u{1F468}[\\u{1F3FB}\\u{1F3FC}\\u{1F3FE}\\u{1F3FF}]|[\\u{1F33E}\\u{1F373}\\u{1F37C}\\u{1F393}\\u{1F3A4}\\u{1F3A8}\\u{1F3EB}\\u{1F3ED}\\u{1F4BB}\\u{1F4BC}\\u{1F527}\\u{1F52C}\\u{1F680}\\u{1F692}\\u{1F9AF}-\\u{1F9B3}\\u{1F9BC}\\u{1F9BD}])|\\u{1F3FC}\\u200D(?:\\u{1F91D}\\u200D\\u{1F468}[\\u{1F3FB}\\u{1F3FD}-\\u{1F3FF}]|[\\u{1F33E}\\u{1F373}\\u{1F37C}\\u{1F393}\\u{1F3A4}\\u{1F3A8}\\u{1F3EB}\\u{1F3ED}\\u{1F4BB}\\u{1F4BC}\\u{1F527}\\u{1F52C}\\u{1F680}\\u{1F692}\\u{1F9AF}-\\u{1F9B3}\\u{1F9BC}\\u{1F9BD}])|(?:\\u{1F3FF}\\u200D[\\u2695\\u2696\\u2708]|\\u{1F3FE}\\u200D[\\u2695\\u2696\\u2708]|\\u{1F3FD}\\u200D[\\u2695\\u2696\\u2708]|\\u{1F3FC}\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708])\\uFE0F|\\u200D(?:[\\u{1F468}\\u{1F469}]\\u200D[\\u{1F466}\\u{1F467}]|[\\u{1F466}\\u{1F467}])|\\u{1F3FF}|\\u{1F3FE}|\\u{1F3FD}|\\u{1F3FC})?|(?:\\u{1F469}(?:\\u{1F3FB}\\u200D\\u2764\\uFE0F\\u200D(?:\\u{1F48B}\\u200D[\\u{1F468}\\u{1F469}]|[\\u{1F468}\\u{1F469}])|[\\u{1F3FC}-\\u{1F3FF}]\\u200D\\u2764\\uFE0F\\u200D(?:\\u{1F48B}\\u200D[\\u{1F468}\\u{1F469}]|[\\u{1F468}\\u{1F469}]))|\\u{1F9D1}[\\u{1F3FB}-\\u{1F3FF}]\\u200D\\u{1F91D}\\u200D\\u{1F9D1})[\\u{1F3FB}-\\u{1F3FF}]|\\u{1F469}\\u200D\\u{1F469}\\u200D(?:\\u{1F466}\\u200D\\u{1F466}|\\u{1F467}\\u200D[\\u{1F466}\\u{1F467}])|\\u{1F469}(?:\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\u{1F48B}\\u200D[\\u{1F468}\\u{1F469}]|[\\u{1F468}\\u{1F469}])|[\\u{1F33E}\\u{1F373}\\u{1F37C}\\u{1F393}\\u{1F3A4}\\u{1F3A8}\\u{1F3EB}\\u{1F3ED}\\u{1F4BB}\\u{1F4BC}\\u{1F527}\\u{1F52C}\\u{1F680}\\u{1F692}\\u{1F9AF}-\\u{1F9B3}\\u{1F9BC}\\u{1F9BD}])|\\u{1F3FF}\\u200D[\\u{1F33E}\\u{1F373}\\u{1F37C}\\u{1F393}\\u{1F3A4}\\u{1F3A8}\\u{1F3EB}\\u{1F3ED}\\u{1F4BB}\\u{1F4BC}\\u{1F527}\\u{1F52C}\\u{1F680}\\u{1F692}\\u{1F9AF}-\\u{1F9B3}\\u{1F9BC}\\u{1F9BD}]|\\u{1F3FE}\\u200D[\\u{1F33E}\\u{1F373}\\u{1F37C}\\u{1F393}\\u{1F3A4}\\u{1F3A8}\\u{1F3EB}\\u{1F3ED}\\u{1F4BB}\\u{1F4BC}\\u{1F527}\\u{1F52C}\\u{1F680}\\u{1F692}\\u{1F9AF}-\\u{1F9B3}\\u{1F9BC}\\u{1F9BD}]|\\u{1F3FD}\\u200D[\\u{1F33E}\\u{1F373}\\u{1F37C}\\u{1F393}\\u{1F3A4}\\u{1F3A8}\\u{1F3EB}\\u{1F3ED}\\u{1F4BB}\\u{1F4BC}\\u{1F527}\\u{1F52C}\\u{1F680}\\u{1F692}\\u{1F9AF}-\\u{1F9B3}\\u{1F9BC}\\u{1F9BD}]|\\u{1F3FC}\\u200D[\\u{1F33E}\\u{1F373}\\u{1F37C}\\u{1F393}\\u{1F3A4}\\u{1F3A8}\\u{1F3EB}\\u{1F3ED}\\u{1F4BB}\\u{1F4BC}\\u{1F527}\\u{1F52C}\\u{1F680}\\u{1F692}\\u{1F9AF}-\\u{1F9B3}\\u{1F9BC}\\u{1F9BD}]|\\u{1F3FB}\\u200D[\\u{1F33E}\\u{1F373}\\u{1F37C}\\u{1F393}\\u{1F3A4}\\u{1F3A8}\\u{1F3EB}\\u{1F3ED}\\u{1F4BB}\\u{1F4BC}\\u{1F527}\\u{1F52C}\\u{1F680}\\u{1F692}\\u{1F9AF}-\\u{1F9B3}\\u{1F9BC}\\u{1F9BD}])|\\u{1F9D1}(?:\\u200D(?:\\u{1F91D}\\u200D\\u{1F9D1}|[\\u{1F33E}\\u{1F373}\\u{1F37C}\\u{1F384}\\u{1F393}\\u{1F3A4}\\u{1F3A8}\\u{1F3EB}\\u{1F3ED}\\u{1F4BB}\\u{1F4BC}\\u{1F527}\\u{1F52C}\\u{1F680}\\u{1F692}\\u{1F9AF}-\\u{1F9B3}\\u{1F9BC}\\u{1F9BD}])|\\u{1F3FF}\\u200D[\\u{1F33E}\\u{1F373}\\u{1F37C}\\u{1F384}\\u{1F393}\\u{1F3A4}\\u{1F3A8}\\u{1F3EB}\\u{1F3ED}\\u{1F4BB}\\u{1F4BC}\\u{1F527}\\u{1F52C}\\u{1F680}\\u{1F692}\\u{1F9AF}-\\u{1F9B3}\\u{1F9BC}\\u{1F9BD}]|\\u{1F3FE}\\u200D[\\u{1F33E}\\u{1F373}\\u{1F37C}\\u{1F384}\\u{1F393}\\u{1F3A4}\\u{1F3A8}\\u{1F3EB}\\u{1F3ED}\\u{1F4BB}\\u{1F4BC}\\u{1F527}\\u{1F52C}\\u{1F680}\\u{1F692}\\u{1F9AF}-\\u{1F9B3}\\u{1F9BC}\\u{1F9BD}]|\\u{1F3FD}\\u200D[\\u{1F33E}\\u{1F373}\\u{1F37C}\\u{1F384}\\u{1F393}\\u{1F3A4}\\u{1F3A8}\\u{1F3EB}\\u{1F3ED}\\u{1F4BB}\\u{1F4BC}\\u{1F527}\\u{1F52C}\\u{1F680}\\u{1F692}\\u{1F9AF}-\\u{1F9B3}\\u{1F9BC}\\u{1F9BD}]|\\u{1F3FC}\\u200D[\\u{1F33E}\\u{1F373}\\u{1F37C}\\u{1F384}\\u{1F393}\\u{1F3A4}\\u{1F3A8}\\u{1F3EB}\\u{1F3ED}\\u{1F4BB}\\u{1F4BC}\\u{1F527}\\u{1F52C}\\u{1F680}\\u{1F692}\\u{1F9AF}-\\u{1F9B3}\\u{1F9BC}\\u{1F9BD}]|\\u{1F3FB}\\u200D[\\u{1F33E}\\u{1F373}\\u{1F37C}\\u{1F384}\\u{1F393}\\u{1F3A4}\\u{1F3A8}\\u{1F3EB}\\u{1F3ED}\\u{1F4BB}\\u{1F4BC}\\u{1F527}\\u{1F52C}\\u{1F680}\\u{1F692}\\u{1F9AF}-\\u{1F9B3}\\u{1F9BC}\\u{1F9BD}])|\\u{1F469}\\u200D\\u{1F466}\\u200D\\u{1F466}|\\u{1F469}\\u200D\\u{1F469}\\u200D[\\u{1F466}\\u{1F467}]|\\u{1F469}\\u200D\\u{1F467}\\u200D[\\u{1F466}\\u{1F467}]|(?:\\u{1F441}\\uFE0F\\u200D\\u{1F5E8}|\\u{1F9D1}(?:\\u{1F3FF}\\u200D[\\u2695\\u2696\\u2708]|\\u{1F3FE}\\u200D[\\u2695\\u2696\\u2708]|\\u{1F3FD}\\u200D[\\u2695\\u2696\\u2708]|\\u{1F3FC}\\u200D[\\u2695\\u2696\\u2708]|\\u{1F3FB}\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708])|\\u{1F469}(?:\\u{1F3FF}\\u200D[\\u2695\\u2696\\u2708]|\\u{1F3FE}\\u200D[\\u2695\\u2696\\u2708]|\\u{1F3FD}\\u200D[\\u2695\\u2696\\u2708]|\\u{1F3FC}\\u200D[\\u2695\\u2696\\u2708]|\\u{1F3FB}\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708])|\\u{1F636}\\u200D\\u{1F32B}|\\u{1F3F3}\\uFE0F\\u200D\\u26A7|\\u{1F43B}\\u200D\\u2744|(?:[\\u{1F3C3}\\u{1F3C4}\\u{1F3CA}\\u{1F46E}\\u{1F470}\\u{1F471}\\u{1F473}\\u{1F477}\\u{1F481}\\u{1F482}\\u{1F486}\\u{1F487}\\u{1F645}-\\u{1F647}\\u{1F64B}\\u{1F64D}\\u{1F64E}\\u{1F6A3}\\u{1F6B4}-\\u{1F6B6}\\u{1F926}\\u{1F935}\\u{1F937}-\\u{1F939}\\u{1F93D}\\u{1F93E}\\u{1F9B8}\\u{1F9B9}\\u{1F9CD}-\\u{1F9CF}\\u{1F9D4}\\u{1F9D6}-\\u{1F9DD}][\\u{1F3FB}-\\u{1F3FF}]|[\\u{1F46F}\\u{1F93C}\\u{1F9DE}\\u{1F9DF}])\\u200D[\\u2640\\u2642]|[\\u26F9\\u{1F3CB}\\u{1F3CC}\\u{1F575}][\\uFE0F\\u{1F3FB}-\\u{1F3FF}]\\u200D[\\u2640\\u2642]|\\u{1F3F4}\\u200D\\u2620|[\\u{1F3C3}\\u{1F3C4}\\u{1F3CA}\\u{1F46E}\\u{1F470}\\u{1F471}\\u{1F473}\\u{1F477}\\u{1F481}\\u{1F482}\\u{1F486}\\u{1F487}\\u{1F645}-\\u{1F647}\\u{1F64B}\\u{1F64D}\\u{1F64E}\\u{1F6A3}\\u{1F6B4}-\\u{1F6B6}\\u{1F926}\\u{1F935}\\u{1F937}-\\u{1F939}\\u{1F93D}\\u{1F93E}\\u{1F9B8}\\u{1F9B9}\\u{1F9CD}-\\u{1F9CF}\\u{1F9D4}\\u{1F9D6}-\\u{1F9DD}]\\u200D[\\u2640\\u2642]|[\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u2328\\u23CF\\u23ED-\\u23EF\\u23F1\\u23F2\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB\\u25FC\\u2600-\\u2604\\u260E\\u2611\\u2618\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u2692\\u2694-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A7\\u26B0\\u26B1\\u26C8\\u26CF\\u26D1\\u26D3\\u26E9\\u26F0\\u26F1\\u26F4\\u26F7\\u26F8\\u2702\\u2708\\u2709\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2733\\u2734\\u2744\\u2747\\u2763\\u27A1\\u2934\\u2935\\u2B05-\\u2B07\\u3030\\u303D\\u3297\\u3299\\u{1F170}\\u{1F171}\\u{1F17E}\\u{1F17F}\\u{1F202}\\u{1F237}\\u{1F321}\\u{1F324}-\\u{1F32C}\\u{1F336}\\u{1F37D}\\u{1F396}\\u{1F397}\\u{1F399}-\\u{1F39B}\\u{1F39E}\\u{1F39F}\\u{1F3CD}\\u{1F3CE}\\u{1F3D4}-\\u{1F3DF}\\u{1F3F5}\\u{1F3F7}\\u{1F43F}\\u{1F4FD}\\u{1F549}\\u{1F54A}\\u{1F56F}\\u{1F570}\\u{1F573}\\u{1F576}-\\u{1F579}\\u{1F587}\\u{1F58A}-\\u{1F58D}\\u{1F5A5}\\u{1F5A8}\\u{1F5B1}\\u{1F5B2}\\u{1F5BC}\\u{1F5C2}-\\u{1F5C4}\\u{1F5D1}-\\u{1F5D3}\\u{1F5DC}-\\u{1F5DE}\\u{1F5E1}\\u{1F5E3}\\u{1F5E8}\\u{1F5EF}\\u{1F5F3}\\u{1F5FA}\\u{1F6CB}\\u{1F6CD}-\\u{1F6CF}\\u{1F6E0}-\\u{1F6E5}\\u{1F6E9}\\u{1F6F0}\\u{1F6F3}])\\uFE0F|\\u{1F3F3}\\uFE0F\\u200D\\u{1F308}|\\u{1F469}\\u200D\\u{1F467}|\\u{1F469}\\u200D\\u{1F466}|\\u{1F635}\\u200D\\u{1F4AB}|\\u{1F62E}\\u200D\\u{1F4A8}|\\u{1F415}\\u200D\\u{1F9BA}|\\u{1F9D1}(?:\\u{1F3FF}|\\u{1F3FE}|\\u{1F3FD}|\\u{1F3FC}|\\u{1F3FB})?|\\u{1F469}(?:\\u{1F3FF}|\\u{1F3FE}|\\u{1F3FD}|\\u{1F3FC}|\\u{1F3FB})?|\\u{1F1FD}\\u{1F1F0}|\\u{1F1F6}\\u{1F1E6}|\\u{1F1F4}\\u{1F1F2}|\\u{1F408}\\u200D\\u2B1B|\\u2764\\uFE0F\\u200D[\\u{1F525}\\u{1FA79}]|\\u{1F441}\\uFE0F|\\u{1F3F3}\\uFE0F|\\u{1F1FF}[\\u{1F1E6}\\u{1F1F2}\\u{1F1FC}]|\\u{1F1FE}[\\u{1F1EA}\\u{1F1F9}]|\\u{1F1FC}[\\u{1F1EB}\\u{1F1F8}]|\\u{1F1FB}[\\u{1F1E6}\\u{1F1E8}\\u{1F1EA}\\u{1F1EC}\\u{1F1EE}\\u{1F1F3}\\u{1F1FA}]|\\u{1F1FA}[\\u{1F1E6}\\u{1F1EC}\\u{1F1F2}\\u{1F1F3}\\u{1F1F8}\\u{1F1FE}\\u{1F1FF}]|\\u{1F1F9}[\\u{1F1E6}\\u{1F1E8}\\u{1F1E9}\\u{1F1EB}-\\u{1F1ED}\\u{1F1EF}-\\u{1F1F4}\\u{1F1F7}\\u{1F1F9}\\u{1F1FB}\\u{1F1FC}\\u{1F1FF}]|\\u{1F1F8}[\\u{1F1E6}-\\u{1F1EA}\\u{1F1EC}-\\u{1F1F4}\\u{1F1F7}-\\u{1F1F9}\\u{1F1FB}\\u{1F1FD}-\\u{1F1FF}]|\\u{1F1F7}[\\u{1F1EA}\\u{1F1F4}\\u{1F1F8}\\u{1F1FA}\\u{1F1FC}]|\\u{1F1F5}[\\u{1F1E6}\\u{1F1EA}-\\u{1F1ED}\\u{1F1F0}-\\u{1F1F3}\\u{1F1F7}-\\u{1F1F9}\\u{1F1FC}\\u{1F1FE}]|\\u{1F1F3}[\\u{1F1E6}\\u{1F1E8}\\u{1F1EA}-\\u{1F1EC}\\u{1F1EE}\\u{1F1F1}\\u{1F1F4}\\u{1F1F5}\\u{1F1F7}\\u{1F1FA}\\u{1F1FF}]|\\u{1F1F2}[\\u{1F1E6}\\u{1F1E8}-\\u{1F1ED}\\u{1F1F0}-\\u{1F1FF}]|\\u{1F1F1}[\\u{1F1E6}-\\u{1F1E8}\\u{1F1EE}\\u{1F1F0}\\u{1F1F7}-\\u{1F1FB}\\u{1F1FE}]|\\u{1F1F0}[\\u{1F1EA}\\u{1F1EC}-\\u{1F1EE}\\u{1F1F2}\\u{1F1F3}\\u{1F1F5}\\u{1F1F7}\\u{1F1FC}\\u{1F1FE}\\u{1F1FF}]|\\u{1F1EF}[\\u{1F1EA}\\u{1F1F2}\\u{1F1F4}\\u{1F1F5}]|\\u{1F1EE}[\\u{1F1E8}-\\u{1F1EA}\\u{1F1F1}-\\u{1F1F4}\\u{1F1F6}-\\u{1F1F9}]|\\u{1F1ED}[\\u{1F1F0}\\u{1F1F2}\\u{1F1F3}\\u{1F1F7}\\u{1F1F9}\\u{1F1FA}]|\\u{1F1EC}[\\u{1F1E6}\\u{1F1E7}\\u{1F1E9}-\\u{1F1EE}\\u{1F1F1}-\\u{1F1F3}\\u{1F1F5}-\\u{1F1FA}\\u{1F1FC}\\u{1F1FE}]|\\u{1F1EB}[\\u{1F1EE}-\\u{1F1F0}\\u{1F1F2}\\u{1F1F4}\\u{1F1F7}]|\\u{1F1EA}[\\u{1F1E6}\\u{1F1E8}\\u{1F1EA}\\u{1F1EC}\\u{1F1ED}\\u{1F1F7}-\\u{1F1FA}]|\\u{1F1E9}[\\u{1F1EA}\\u{1F1EC}\\u{1F1EF}\\u{1F1F0}\\u{1F1F2}\\u{1F1F4}\\u{1F1FF}]|\\u{1F1E8}[\\u{1F1E6}\\u{1F1E8}\\u{1F1E9}\\u{1F1EB}-\\u{1F1EE}\\u{1F1F0}-\\u{1F1F5}\\u{1F1F7}\\u{1F1FA}-\\u{1F1FF}]|\\u{1F1E7}[\\u{1F1E6}\\u{1F1E7}\\u{1F1E9}-\\u{1F1EF}\\u{1F1F1}-\\u{1F1F4}\\u{1F1F6}-\\u{1F1F9}\\u{1F1FB}\\u{1F1FC}\\u{1F1FE}\\u{1F1FF}]|\\u{1F1E6}[\\u{1F1E8}-\\u{1F1EC}\\u{1F1EE}\\u{1F1F1}\\u{1F1F2}\\u{1F1F4}\\u{1F1F6}-\\u{1F1FA}\\u{1F1FC}\\u{1F1FD}\\u{1F1FF}]|[#\\*0-9]\\uFE0F\\u20E3|\\u2764\\uFE0F|[\\u{1F3C3}\\u{1F3C4}\\u{1F3CA}\\u{1F46E}\\u{1F470}\\u{1F471}\\u{1F473}\\u{1F477}\\u{1F481}\\u{1F482}\\u{1F486}\\u{1F487}\\u{1F645}-\\u{1F647}\\u{1F64B}\\u{1F64D}\\u{1F64E}\\u{1F6A3}\\u{1F6B4}-\\u{1F6B6}\\u{1F926}\\u{1F935}\\u{1F937}-\\u{1F939}\\u{1F93D}\\u{1F93E}\\u{1F9B8}\\u{1F9B9}\\u{1F9CD}-\\u{1F9CF}\\u{1F9D4}\\u{1F9D6}-\\u{1F9DD}][\\u{1F3FB}-\\u{1F3FF}]|[\\u26F9\\u{1F3CB}\\u{1F3CC}\\u{1F575}][\\uFE0F\\u{1F3FB}-\\u{1F3FF}]|\\u{1F3F4}|[\\u270A\\u270B\\u{1F385}\\u{1F3C2}\\u{1F3C7}\\u{1F442}\\u{1F443}\\u{1F446}-\\u{1F450}\\u{1F466}\\u{1F467}\\u{1F46B}-\\u{1F46D}\\u{1F472}\\u{1F474}-\\u{1F476}\\u{1F478}\\u{1F47C}\\u{1F483}\\u{1F485}\\u{1F48F}\\u{1F491}\\u{1F4AA}\\u{1F57A}\\u{1F595}\\u{1F596}\\u{1F64C}\\u{1F64F}\\u{1F6C0}\\u{1F6CC}\\u{1F90C}\\u{1F90F}\\u{1F918}-\\u{1F91C}\\u{1F91E}\\u{1F91F}\\u{1F930}-\\u{1F934}\\u{1F936}\\u{1F977}\\u{1F9B5}\\u{1F9B6}\\u{1F9BB}\\u{1F9D2}\\u{1F9D3}\\u{1F9D5}][\\u{1F3FB}-\\u{1F3FF}]|[\\u261D\\u270C\\u270D\\u{1F574}\\u{1F590}][\\uFE0F\\u{1F3FB}-\\u{1F3FF}]|[\\u270A\\u270B\\u{1F385}\\u{1F3C2}\\u{1F3C7}\\u{1F408}\\u{1F415}\\u{1F43B}\\u{1F442}\\u{1F443}\\u{1F446}-\\u{1F450}\\u{1F466}\\u{1F467}\\u{1F46B}-\\u{1F46D}\\u{1F472}\\u{1F474}-\\u{1F476}\\u{1F478}\\u{1F47C}\\u{1F483}\\u{1F485}\\u{1F48F}\\u{1F491}\\u{1F4AA}\\u{1F57A}\\u{1F595}\\u{1F596}\\u{1F62E}\\u{1F635}\\u{1F636}\\u{1F64C}\\u{1F64F}\\u{1F6C0}\\u{1F6CC}\\u{1F90C}\\u{1F90F}\\u{1F918}-\\u{1F91C}\\u{1F91E}\\u{1F91F}\\u{1F930}-\\u{1F934}\\u{1F936}\\u{1F977}\\u{1F9B5}\\u{1F9B6}\\u{1F9BB}\\u{1F9D2}\\u{1F9D3}\\u{1F9D5}]|[\\u{1F3C3}\\u{1F3C4}\\u{1F3CA}\\u{1F46E}\\u{1F470}\\u{1F471}\\u{1F473}\\u{1F477}\\u{1F481}\\u{1F482}\\u{1F486}\\u{1F487}\\u{1F645}-\\u{1F647}\\u{1F64B}\\u{1F64D}\\u{1F64E}\\u{1F6A3}\\u{1F6B4}-\\u{1F6B6}\\u{1F926}\\u{1F935}\\u{1F937}-\\u{1F939}\\u{1F93D}\\u{1F93E}\\u{1F9B8}\\u{1F9B9}\\u{1F9CD}-\\u{1F9CF}\\u{1F9D4}\\u{1F9D6}-\\u{1F9DD}]|[\\u{1F46F}\\u{1F93C}\\u{1F9DE}\\u{1F9DF}]|[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55\\u{1F004}\\u{1F0CF}\\u{1F18E}\\u{1F191}-\\u{1F19A}\\u{1F201}\\u{1F21A}\\u{1F22F}\\u{1F232}-\\u{1F236}\\u{1F238}-\\u{1F23A}\\u{1F250}\\u{1F251}\\u{1F300}-\\u{1F320}\\u{1F32D}-\\u{1F335}\\u{1F337}-\\u{1F37C}\\u{1F37E}-\\u{1F384}\\u{1F386}-\\u{1F393}\\u{1F3A0}-\\u{1F3C1}\\u{1F3C5}\\u{1F3C6}\\u{1F3C8}\\u{1F3C9}\\u{1F3CF}-\\u{1F3D3}\\u{1F3E0}-\\u{1F3F0}\\u{1F3F8}-\\u{1F407}\\u{1F409}-\\u{1F414}\\u{1F416}-\\u{1F43A}\\u{1F43C}-\\u{1F43E}\\u{1F440}\\u{1F444}\\u{1F445}\\u{1F451}-\\u{1F465}\\u{1F46A}\\u{1F479}-\\u{1F47B}\\u{1F47D}-\\u{1F480}\\u{1F484}\\u{1F488}-\\u{1F48E}\\u{1F490}\\u{1F492}-\\u{1F4A9}\\u{1F4AB}-\\u{1F4FC}\\u{1F4FF}-\\u{1F53D}\\u{1F54B}-\\u{1F54E}\\u{1F550}-\\u{1F567}\\u{1F5A4}\\u{1F5FB}-\\u{1F62D}\\u{1F62F}-\\u{1F634}\\u{1F637}-\\u{1F644}\\u{1F648}-\\u{1F64A}\\u{1F680}-\\u{1F6A2}\\u{1F6A4}-\\u{1F6B3}\\u{1F6B7}-\\u{1F6BF}\\u{1F6C1}-\\u{1F6C5}\\u{1F6D0}-\\u{1F6D2}\\u{1F6D5}-\\u{1F6D7}\\u{1F6EB}\\u{1F6EC}\\u{1F6F4}-\\u{1F6FC}\\u{1F7E0}-\\u{1F7EB}\\u{1F90D}\\u{1F90E}\\u{1F910}-\\u{1F917}\\u{1F91D}\\u{1F920}-\\u{1F925}\\u{1F927}-\\u{1F92F}\\u{1F93A}\\u{1F93F}-\\u{1F945}\\u{1F947}-\\u{1F976}\\u{1F978}\\u{1F97A}-\\u{1F9B4}\\u{1F9B7}\\u{1F9BA}\\u{1F9BC}-\\u{1F9CB}\\u{1F9D0}\\u{1F9E0}-\\u{1F9FF}\\u{1FA70}-\\u{1FA74}\\u{1FA78}-\\u{1FA7A}\\u{1FA80}-\\u{1FA86}\\u{1FA90}-\\u{1FAA8}\\u{1FAB0}-\\u{1FAB6}\\u{1FAC0}-\\u{1FAC2}\\u{1FAD0}-\\u{1FAD6}]/gu;\n};\n"],"names":["MeasurementUnit","combineRecords","a","b","last","length","isDefined","undefined","flatReduce","f","acc","nested","flat","reduce","flatEvery","p","t","logWarning","handler","supressConsole","target","code","message","type","console","warn","isSpriteSource","s","PIXI","Texture","HTMLCanvasElement","HTMLVideoElement","predicate","group","any","DEFAULT_MEASUREMENT_UNIT","createEmptyFinalToken","content","bounds","Rectangle","fontProperties","ascent","descent","fontSize","style","tags","textDecorations","isWhitespace","split","every","char","search","isSpriteToken","Sprite","_isTextToken","isTextToken","isWhitespaceToken","_isNewlineToken","isNewlineToken","isNotWhitespaceToken","input","isEmptyObject","Object","keys","measurementValueToComponents","Error","value","unit","trim","pattern","RegExp","values","join","i","parseFloat","slice","forcedNumberConversion","isNaN","NaN","unknown","defaultLogWarning","getTagRegex","tagNamesToMatch","matchingTagNames","captureGroup","noCaptureGroup","QUOTE","NOT_QUOTE","TAG_NAMES","ATTRIBUTE_VALUE","ATTRIBUTES","WHITESPACE","CHAR","TAG_OPEN","parseAttributes","attributesString","attributes","match","obj","attribute","attributePair","name","valueStr","substring","createTagMatchData","openTagName","index","tag","tagName","isOpening","selfClosingTagSearch","not","TAG_SLASH","tagMatchToTagToken","children","capitalize","str","chars","converted","charAt","toUpperCase","substr","measureFont","context","TextMetrics","font","getFontPropertiesOfText","textField","forceUpdate","updateText","props","fs","Number","DEFAULT_STYLE","valign","dropShadowColor","fill","stroke","wordWrap","wordWrapWidth","combineStyles","combineAllStyles","styles","filter","getStyleForTag","tagStyles","convertedAttributes","key","isStringNumber","convertAttributeValues","injectAttributes","convertUnsupportedAlignment","align","sizer","Text","rectFromContainer","container","offset","x","y","width","height","translateLine","line","map","point","translatePoint","lineWidth","wordsInLine","firstWord","lastWord","setBoundsX","object","positionWordX","word","prevBounds","token","concatBounds","originalBounds","Math","min","max","getBoundsNested","alignLeft","newLine","concat","alignRight","maxWidth","alignCenter","alignJustify","maxLineWidth","nonZeroWidthWords","countNonZeroWidthWords","first","rest","previousWord","result","combinedBounds","getCombinedBounds","spacerWidth","newWord","getTallestToken","tallest","current","h","notEmptyString","splitAroundWhitespace","replace","SPLIT_MARKER","DEFAULT_OPTIONS","debug","debugConsole","splitStyle","imgMap","scaleIcons","skipUpdates","skipDraw","drawWhitespace","wrapEmoji","errorHandler","DEBUG","fontFamily","dropShadow","DEFAULT_STYLE_SET","default","freeze","DEFAULT_DESTROY_OPTIONS","texture","TaggedText","text","options","_this","_options","_needsUpdate","_needsDraw","_tokens","_text","_tagStyles","_textFields","_sprites","_decorations","_spriteTemplates","_debugGraphics","_textContainer","_decorationContainer","_spriteContainer","_debugContainer","_logWarning","Container","Graphics","resetChildren","mergedOptions","mergedDefaultStyles","createSpriteTemplatesFromSourceMap","setText","skipUpdate","this","updateIfShould","setTagStyles","entries","forEach","_this2","setStyleForTag","getStyleForTagExt","getStyleForTags","_this3","defaultStyle","IMG_REFERENCE_PROPERTY","removeStylesForTag","setDefaultStyle","defaultStyles","destroyImgMap","destroyed","destroy","baseTexture","destroyOptions","_PIXI$Sprite","removeChildren","removeChild","addChild","spriteSource","wrongFormatError","TypeError","destroyedError","error","sprite","from","HTMLImageElement","isImageElement","BaseTexture","isBaseTexture","log","e","addListener","onTextureUpdate","_this4","onImageTextureUpdate","removeListener","spriteTemplates","existingStyle","forcedSkipUpdate","update","styledTokens","tokens","tagStack","fontSizeStack","styleCache","convertTagTokenToStyledToken","baseValue","baseUnit","objects","currentBaseFontSize","push","o","tagHash","JSON","stringify","tagWithAttributesToStyle","stylesWithDefault","textDecoration","defaultColor","decorationColor","defaultThickness","decorationThickness","mergeDecoration","decorationLineType","decorationLineTypeCamelCase","_style$textDecoration","includes","convertDecorationToLineProps","percent","styledToken","imgKey","cloneOfSprite","cloneSprite","pop","mapTagsToStyles","shouldWrapEmoji","logWarningFunction","test","containsEmoji","emojiRegex","source","replaceAll","tagStart","_","output","replaceSelfClosingTags","re","tagMatches","exec","tagMatch","segments","tagMatchData","remaining","startOfTag","endOfTag","segment","extractSegments","rootTokens","tokenStack","poppedToken","createTokensNew","parseTagsNew","newFinalTokens","adjustFontBaseline","finalTokens","flatMap","generateFinalTokenFromStyledToken","alignClassic","dropShadowBlur","dropShadowDistance","dropShadowAngle","textSegments","suggestion","badStyle","toLowerCase","indexOf","splitText","textTokens","textTransform","sw","fontScaleWidth","sh","fontScaleHeight","scaleWidth","scaleHeight","scale","set","strokeThickness","textBounds","baseline","ascender","xHeight","color","extractDecorations","baselineAdjustment","fontBaselineMap","_style$fontFamily","toString","adjustBaseline","finalValue","percentPair","isPercent","getBaselineAdjustment","letterSpacing","isIcon","scaleY","newStyle","newTags","ww","www","hasWordWrapWidth","lineSpacing","cursor","wordWidth","allLines","tallestHeightInLine","addWordBufferToLineBuffer","addLineToListOfLines","addLineToListOfLinesAndMoveCursorToNextLine","setTallestHeight","_token$fontProperties2","_token$bounds","positionTokenAtCursorAndAdvanceCursor","positionWordBufferAtCursorAndAdvanceCursor","isBlockImage","addTokenToWordAndUpdateWordWidth","isNewline","isImage","collapsedWhitespace","lines","collapseWhitespacesOnEndOfLines","alignedLines","alignFunction","lastAlignFunction","alignedLine","isLastLine","wordBoundsForLine","wordBounds","alignLines","valignedLines","overrideValign","previousTallestToken","previousLineBottom","paragraphModifier","newLines","tallestToken","tallestHeight","_tallestToken$bounds","tallestAscent","_tallestToken$fontPro2","valignParagraphModifier","paragraphSpacing","newBounds","newToken","newY","verticalAlignInLines","layout","POSITIVE_INFINITY","calculateFinalTokens","drawIfShould","toDebugString","forcedSkipDraw","draw","textContainer","spriteContainer","displayObject","tokensFlat","drewDecorations","_this5","createTextFieldForToken","textFields","drawing","createDrawingForTextDecoration","sprites","drawDebug","parseInt","beginFill","drawRect","endFill","sanitizedStyle","finalScaleWidth","finalScaleHeight","largerScale","fontSizePx","size","fontSizeStringToNumber","untaggedText","nl","lineNumber","wordNumber","tokenNumber","paragraph","debugContainer","g","createInfoText","position","info","clear","lineBounds","w","lineStyle","segmentToken","isSprite","_this$tagStyles"],"mappings":"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"}